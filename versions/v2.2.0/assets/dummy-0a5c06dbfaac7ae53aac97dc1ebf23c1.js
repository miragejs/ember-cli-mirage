"use strict"
define("dummy/adapters/-addon-docs",["exports","ember-cli-addon-docs/adapters/-addon-docs"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/adapters/-json-api",["exports","@ember-data/adapter/json-api"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/adapters/class",["exports","ember-cli-addon-docs/adapters/class"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/adapters/component",["exports","ember-cli-addon-docs/adapters/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/adapters/module",["exports","ember-cli-addon-docs/adapters/module"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/adapters/post",["exports","jquery","ember-data"],(function(e,t,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var r="https://api.github.com/repos/miragejs/ember-cli-mirage",o=n.default.JSONAPIAdapter.extend({findRecord:function(e,n,o,s){var i="".concat(r,"/issues/").concat(o)
return new Ember.RSVP.Promise((function(e,n){t.default.getJSON(i).then((function(t){var n={data:{id:o,type:"posts",attributes:{title:t.title,body:t.body,"issue-url":t.html_url},relationships:{comments:{links:{related:t.comments_url}}}}}
e(n)}),(function(e){n(e)}))}))},findAll:function(e,n){var o=this,s="".concat(r,"/issues?state=closed&labels=Blog%20post")
return new Ember.RSVP.Promise((function(e,n){t.default.getJSON(s).then((function(t){o.hasLoadedAllPosts=!0
var n={data:t.map((function(e){return{id:e.number,type:"posts",attributes:{title:e.title,body:e.body,"issue-url":e.html_url}}}))}
e(n)}),(function(e){n(e)}))}))},shouldReloadAll:function(e,t){return!this.hasLoadedAllPosts},findHasMany:function(e,n,r,o){return new Ember.RSVP.Promise((function(e,n){t.default.getJSON(r).then((function(t){var n={data:[],included:[]},r={}
t.forEach((function(e){n.data.push({id:e.id,type:"comments",attributes:{body:e.body,permalink:e.html_url,"created-at":e.created_at},relationships:{user:{data:{type:"users",id:e.user.id}}}}),r[e.user.id]=e.user})),Object.keys(r).forEach((function(e){var t=r[e]
n.included.push({type:"users",id:t.id,attributes:{"avatar-url":t.avatar_url,"profile-url":t.html_url,username:t.login}})})),e(n)}),(function(e){n(e)}))}))}})
e.default=o})),define("dummy/adapters/project",["exports","ember-cli-addon-docs/adapters/project"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/app",["exports","dummy/resolver","ember-load-initializers","dummy/config/environment"],(function(e,t,n,r){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var o=Ember.Application.extend({modulePrefix:r.default.modulePrefix,podModulePrefix:r.default.podModulePrefix,Resolver:t.default});(0,n.default)(o,r.default.modulePrefix)
var s=o
e.default=s})),define("dummy/breakpoints",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default={mobile:"(max-width: 767px)",tablet:"(min-width: 768px) and (max-width: 991px)",desktop:"(min-width: 992px) and (max-width: 1200px)",jumbo:"(min-width: 1201px)"}})),define("dummy/components/-lf-get-outlet-state",["exports","liquid-fire/components/-lf-get-outlet-state"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-class",["exports","ember-cli-addon-docs/components/api/x-class/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-component",["exports","ember-cli-addon-docs/components/api/x-component/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-import-path",["exports","ember-cli-addon-docs/components/api/x-import-path/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-meta-panel",["exports","ember-cli-addon-docs/components/api/x-meta-panel/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-meta-panel/header",["exports","ember-cli-addon-docs/components/api/x-meta-panel/header/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-module",["exports","ember-cli-addon-docs/components/api/x-module/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-section",["exports","ember-cli-addon-docs/components/api/x-section/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-sections",["exports","ember-cli-addon-docs/components/api/x-sections/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/api/x-toggles",["exports","ember-cli-addon-docs/components/api/x-toggles/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/copy-button",["exports","ember-cli-clipboard/components/copy-button"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-code-highlight",["exports","ember-cli-addon-docs/components/docs-code-highlight/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-demo",["exports","ember-cli-addon-docs/components/docs-demo/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-demo/x-example",["exports","ember-cli-addon-docs/components/docs-demo/x-example/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-demo/x-snippet",["exports","ember-cli-addon-docs/components/docs-demo/x-snippet/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-header",["exports","ember-cli-addon-docs/components/docs-header/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-header/link",["exports","ember-cli-addon-docs/components/docs-header/link/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-header/search-box",["exports","ember-cli-addon-docs/components/docs-header/search-box/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-header/search-result",["exports","ember-cli-addon-docs/components/docs-header/search-result/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-header/search-results",["exports","ember-cli-addon-docs/components/docs-header/search-results/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-header/version-selector",["exports","ember-cli-addon-docs/components/docs-header/version-selector/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}))
define("dummy/components/docs-hero",["exports","ember-cli-addon-docs/components/docs-hero/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-keyboard-shortcuts",["exports","ember-cli-addon-docs/components/docs-keyboard-shortcuts/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-link",["exports","ember-cli-addon-docs/components/docs-link/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-logo",["exports","ember-cli-addon-docs/components/docs-logo/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-snippet",["exports","ember-cli-addon-docs/components/docs-snippet/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-svg-icon",["exports","ember-cli-addon-docs/components/docs-svg-icon/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer",["exports","ember-cli-addon-docs/components/docs-viewer/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-autogenerated-api-docs",["exports","ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-autogenerated-api-docs/module-nav",["exports","ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/module-nav/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-current-page-index",["exports","ember-cli-addon-docs/components/docs-viewer/x-current-page-index/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-main",["exports","ember-cli-addon-docs/components/docs-viewer/x-main/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-nav-item",["exports","ember-cli-addon-docs/components/docs-viewer/x-nav-item/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-nav-list",["exports","ember-cli-addon-docs/components/docs-viewer/x-nav-list/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-nav",["exports","ember-cli-addon-docs/components/docs-viewer/x-nav/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/docs-viewer/x-section",["exports","ember-cli-addon-docs/components/docs-viewer/x-section/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-modal-dialog-positioned-container",["exports","ember-modal-dialog/components/positioned-container"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-modal-dialog/-basic-dialog",["exports","ember-modal-dialog/components/basic-dialog"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-modal-dialog/-in-place-dialog",["exports","ember-modal-dialog/components/in-place-dialog"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-modal-dialog/-liquid-dialog",["exports","ember-modal-dialog/components/liquid-dialog"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-modal-dialog/-liquid-tether-dialog",["exports","ember-modal-dialog/components/liquid-tether-dialog"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-modal-dialog/-tether-dialog",["exports","ember-modal-dialog/components/tether-dialog"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-tether",["exports","ember-tether/components/ember-tether"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/ember-wormhole",["exports","ember-wormhole/components/ember-wormhole"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/illiquid-model",["exports","liquid-fire/components/illiquid-model"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-bind",["exports","liquid-fire/components/liquid-bind"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-child",["exports","liquid-fire/components/liquid-child"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-container",["exports","liquid-fire/components/liquid-container"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-if",["exports","liquid-fire/components/liquid-if"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-measured",["exports","liquid-fire/components/liquid-measured"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"measure",{enumerable:!0,get:function(){return t.measure}})})),define("dummy/components/liquid-outlet",["exports","liquid-fire/components/liquid-outlet"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}))
define("dummy/components/liquid-spacer",["exports","liquid-fire/components/liquid-spacer"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-sync",["exports","liquid-fire/components/liquid-sync"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-unless",["exports","liquid-fire/components/liquid-unless"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/liquid-versions",["exports","liquid-fire/components/liquid-versions"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/components/modal-dialog",["exports","ember-cli-addon-docs/components/modal-dialog/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/controllers/docs/api/class",["exports","ember-cli-addon-docs/controllers/docs/api/class"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/and",["exports","ember-truth-helpers/helpers/and"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"and",{enumerable:!0,get:function(){return t.and}})})),define("dummy/helpers/append",["exports","ember-composable-helpers/helpers/append"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"append",{enumerable:!0,get:function(){return t.append}})})),define("dummy/helpers/break-on",["exports","ember-cli-addon-docs/helpers/break-on"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/call",["exports","ember-composable-helpers/helpers/call"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"call",{enumerable:!0,get:function(){return t.call}})})),define("dummy/helpers/camelize",["exports","ember-cli-string-helpers/helpers/camelize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"camelize",{enumerable:!0,get:function(){return t.camelize}})})),define("dummy/helpers/cancel-all",["exports","ember-concurrency/helpers/cancel-all"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/capitalize",["exports","ember-cli-string-helpers/helpers/capitalize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"capitalize",{enumerable:!0,get:function(){return t.capitalize}})})),define("dummy/helpers/chunk",["exports","ember-composable-helpers/helpers/chunk"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"chunk",{enumerable:!0,get:function(){return t.chunk}})})),define("dummy/helpers/classify",["exports","ember-cli-string-helpers/helpers/classify"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"classify",{enumerable:!0,get:function(){return t.classify}})})),define("dummy/helpers/compact",["exports","ember-composable-helpers/helpers/compact"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/compute",["exports","ember-composable-helpers/helpers/compute"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"compute",{enumerable:!0,get:function(){return t.compute}})})),define("dummy/helpers/contains",["exports","ember-composable-helpers/helpers/contains"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"contains",{enumerable:!0,get:function(){return t.contains}})})),define("dummy/helpers/dasherize",["exports","ember-cli-string-helpers/helpers/dasherize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"dasherize",{enumerable:!0,get:function(){return t.dasherize}})})),define("dummy/helpers/dec",["exports","ember-composable-helpers/helpers/dec"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"dec",{enumerable:!0,get:function(){return t.dec}})})),define("dummy/helpers/drop",["exports","ember-composable-helpers/helpers/drop"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/entries",["exports","ember-composable-helpers/helpers/entries"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"entries",{enumerable:!0,get:function(){return t.entries}})})),define("dummy/helpers/eq",["exports","ember-truth-helpers/helpers/equal"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"equal",{enumerable:!0,get:function(){return t.equal}})})),define("dummy/helpers/filter-by",["exports","ember-composable-helpers/helpers/filter-by"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/filter",["exports","ember-composable-helpers/helpers/filter"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/find-by",["exports","ember-composable-helpers/helpers/find-by"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/flatten",["exports","ember-composable-helpers/helpers/flatten"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"flatten",{enumerable:!0,get:function(){return t.flatten}})})),define("dummy/helpers/from-entries",["exports","ember-composable-helpers/helpers/from-entries"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"fromEntries",{enumerable:!0,get:function(){return t.fromEntries}})})),define("dummy/helpers/get-code-snippet",["exports","ember-code-snippet/helpers/get-code-snippet"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/group-by",["exports","ember-composable-helpers/helpers/group-by"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}))
define("dummy/helpers/gt",["exports","ember-truth-helpers/helpers/gt"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"gt",{enumerable:!0,get:function(){return t.gt}})})),define("dummy/helpers/gte",["exports","ember-truth-helpers/helpers/gte"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"gte",{enumerable:!0,get:function(){return t.gte}})})),define("dummy/helpers/has-next",["exports","ember-composable-helpers/helpers/has-next"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"hasNext",{enumerable:!0,get:function(){return t.hasNext}})})),define("dummy/helpers/has-previous",["exports","ember-composable-helpers/helpers/has-previous"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"hasPrevious",{enumerable:!0,get:function(){return t.hasPrevious}})})),define("dummy/helpers/href-to",["exports","ember-href-to/helpers/href-to"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"hrefTo",{enumerable:!0,get:function(){return t.hrefTo}})})),define("dummy/helpers/html-safe",["exports","ember-cli-string-helpers/helpers/html-safe"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"htmlSafe",{enumerable:!0,get:function(){return t.htmlSafe}})})),define("dummy/helpers/humanize",["exports","ember-cli-string-helpers/helpers/humanize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"humanize",{enumerable:!0,get:function(){return t.humanize}})})),define("dummy/helpers/ignore-children",["exports","ember-ignore-children-helper/helpers/ignore-children"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"ignoreChildren",{enumerable:!0,get:function(){return t.ignoreChildren}})})),define("dummy/helpers/inc",["exports","ember-composable-helpers/helpers/inc"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"inc",{enumerable:!0,get:function(){return t.inc}})})),define("dummy/helpers/includes",["exports","ember-composable-helpers/helpers/includes"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"includes",{enumerable:!0,get:function(){return t.includes}})})),define("dummy/helpers/intersect",["exports","ember-composable-helpers/helpers/intersect"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/invoke",["exports","ember-composable-helpers/helpers/invoke"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"invoke",{enumerable:!0,get:function(){return t.invoke}})})),define("dummy/helpers/is-after",["exports","ember-moment/helpers/is-after"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/is-array",["exports","ember-truth-helpers/helpers/is-array"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"isArray",{enumerable:!0,get:function(){return t.isArray}})})),define("dummy/helpers/is-before",["exports","ember-moment/helpers/is-before"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/is-between",["exports","ember-moment/helpers/is-between"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/is-clipboard-supported",["exports","ember-cli-clipboard/helpers/is-clipboard-supported"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"isClipboardSupported",{enumerable:!0,get:function(){return t.isClipboardSupported}})})),define("dummy/helpers/is-empty",["exports","ember-truth-helpers/helpers/is-empty"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/is-equal",["exports","ember-truth-helpers/helpers/is-equal"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"isEqual",{enumerable:!0,get:function(){return t.isEqual}})})),define("dummy/helpers/is-same-or-after",["exports","ember-moment/helpers/is-same-or-after"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/is-same-or-before",["exports","ember-moment/helpers/is-same-or-before"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/is-same",["exports","ember-moment/helpers/is-same"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/join",["exports","ember-composable-helpers/helpers/join"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/keys",["exports","ember-composable-helpers/helpers/keys"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"keys",{enumerable:!0,get:function(){return t.keys}})})),define("dummy/helpers/lf-lock-model",["exports","liquid-fire/helpers/lf-lock-model"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"lfLockModel",{enumerable:!0,get:function(){return t.lfLockModel}})})),define("dummy/helpers/lf-or",["exports","liquid-fire/helpers/lf-or"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"lfOr",{enumerable:!0,get:function(){return t.lfOr}})})),define("dummy/helpers/lowercase",["exports","ember-cli-string-helpers/helpers/lowercase"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"lowercase",{enumerable:!0,get:function(){return t.lowercase}})})),define("dummy/helpers/lt",["exports","ember-truth-helpers/helpers/lt"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"lt",{enumerable:!0,get:function(){return t.lt}})})),define("dummy/helpers/lte",["exports","ember-truth-helpers/helpers/lte"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"lte",{enumerable:!0,get:function(){return t.lte}})})),define("dummy/helpers/map-by",["exports","ember-composable-helpers/helpers/map-by"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}))
define("dummy/helpers/map",["exports","ember-composable-helpers/helpers/map"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/media",["exports","ember-responsive/helpers/media"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"media",{enumerable:!0,get:function(){return t.media}})})),define("dummy/helpers/moment-add",["exports","ember-moment/helpers/moment-add"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-calendar",["exports","ember-moment/helpers/moment-calendar"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-diff",["exports","ember-moment/helpers/moment-diff"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-duration",["exports","ember-moment/helpers/moment-duration"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-format",["exports","ember-moment/helpers/moment-format"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-from-now",["exports","ember-moment/helpers/moment-from-now"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-from",["exports","ember-moment/helpers/moment-from"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-subtract",["exports","ember-moment/helpers/moment-subtract"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-to-date",["exports","ember-moment/helpers/moment-to-date"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-to-now",["exports","ember-moment/helpers/moment-to-now"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-to",["exports","ember-moment/helpers/moment-to"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment-unix",["exports","ember-moment/helpers/unix"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/moment",["exports","ember-moment/helpers/moment"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/next",["exports","ember-composable-helpers/helpers/next"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"next",{enumerable:!0,get:function(){return t.next}})})),define("dummy/helpers/noop",["exports","ember-composable-helpers/helpers/noop"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"noop",{enumerable:!0,get:function(){return t.noop}})})),define("dummy/helpers/not-eq",["exports","ember-truth-helpers/helpers/not-equal"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"notEq",{enumerable:!0,get:function(){return t.notEq}})})),define("dummy/helpers/not",["exports","ember-truth-helpers/helpers/not"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"not",{enumerable:!0,get:function(){return t.not}})})),define("dummy/helpers/now",["exports","ember-moment/helpers/now"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/object-at",["exports","ember-composable-helpers/helpers/object-at"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"objectAt",{enumerable:!0,get:function(){return t.objectAt}})})),define("dummy/helpers/optional",["exports","ember-composable-helpers/helpers/optional"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"optional",{enumerable:!0,get:function(){return t.optional}})})),define("dummy/helpers/or",["exports","ember-truth-helpers/helpers/or"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"or",{enumerable:!0,get:function(){return t.or}})})),define("dummy/helpers/perform",["exports","ember-concurrency/helpers/perform"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/pick",["exports","ember-composable-helpers/helpers/pick"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"pick",{enumerable:!0,get:function(){return t.pick}})})),define("dummy/helpers/pipe-action",["exports","ember-composable-helpers/helpers/pipe-action"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/pipe",["exports","ember-composable-helpers/helpers/pipe"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"pipe",{enumerable:!0,get:function(){return t.pipe}})})),define("dummy/helpers/pluralize",["exports","ember-inflector/lib/helpers/pluralize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default
e.default=n})),define("dummy/helpers/prevent-default",["exports","ember-on-modifier/helpers/prevent-default"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"preventDefault",{enumerable:!0,get:function(){return t.preventDefault}})})),define("dummy/helpers/previous",["exports","ember-composable-helpers/helpers/previous"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"previous",{enumerable:!0,get:function(){return t.previous}})}))
define("dummy/helpers/queue",["exports","ember-composable-helpers/helpers/queue"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"queue",{enumerable:!0,get:function(){return t.queue}})})),define("dummy/helpers/range",["exports","ember-composable-helpers/helpers/range"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"range",{enumerable:!0,get:function(){return t.range}})})),define("dummy/helpers/reduce",["exports","ember-composable-helpers/helpers/reduce"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/reject-by",["exports","ember-composable-helpers/helpers/reject-by"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/repeat",["exports","ember-composable-helpers/helpers/repeat"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"repeat",{enumerable:!0,get:function(){return t.repeat}})})),define("dummy/helpers/reverse",["exports","ember-composable-helpers/helpers/reverse"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/route-idle",["exports","ember-app-scheduler/helpers/route-idle"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"routeIdle",{enumerable:!0,get:function(){return t.routeIdle}})})),define("dummy/helpers/shuffle",["exports","ember-composable-helpers/helpers/shuffle"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"shuffle",{enumerable:!0,get:function(){return t.shuffle}})})),define("dummy/helpers/singularize",["exports","ember-inflector/lib/helpers/singularize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default
e.default=n})),define("dummy/helpers/slice",["exports","ember-composable-helpers/helpers/slice"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/sort-by",["exports","ember-composable-helpers/helpers/sort-by"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/svg-jar",["exports","ember-svg-jar/utils/make-helper","ember-svg-jar/utils/make-svg"],(function(e,t,n){function r(e){try{return require("ember-svg-jar/inlined/".concat(e)).default}catch(t){return null}}function o(e,t){return(0,n.default)(e,t,r)}Object.defineProperty(e,"__esModule",{value:!0}),e.svgJar=o,e.default=void 0
var s=(0,t.default)(o)
e.default=s})),define("dummy/helpers/take",["exports","ember-composable-helpers/helpers/take"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/task",["exports","ember-concurrency/helpers/task"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/titleize",["exports","ember-cli-string-helpers/helpers/titleize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"titleize",{enumerable:!0,get:function(){return t.titleize}})})),define("dummy/helpers/toggle-action",["exports","ember-composable-helpers/helpers/toggle-action"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/toggle",["exports","ember-composable-helpers/helpers/toggle"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"toggle",{enumerable:!0,get:function(){return t.toggle}})})),define("dummy/helpers/trim",["exports","ember-cli-string-helpers/helpers/trim"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"trim",{enumerable:!0,get:function(){return t.trim}})})),define("dummy/helpers/truncate",["exports","ember-cli-string-helpers/helpers/truncate"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"truncate",{enumerable:!0,get:function(){return t.truncate}})})),define("dummy/helpers/type-signature",["exports","ember-cli-addon-docs/helpers/type-signature"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/underscore",["exports","ember-cli-string-helpers/helpers/underscore"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"underscore",{enumerable:!0,get:function(){return t.underscore}})})),define("dummy/helpers/union",["exports","ember-composable-helpers/helpers/union"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/unix",["exports","ember-moment/helpers/unix"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/helpers/uppercase",["exports","ember-cli-string-helpers/helpers/uppercase"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"uppercase",{enumerable:!0,get:function(){return t.uppercase}})})),define("dummy/helpers/utc",["exports","ember-moment/helpers/utc"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"utc",{enumerable:!0,get:function(){return t.utc}})})),define("dummy/helpers/values",["exports","ember-composable-helpers/helpers/values"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"values",{enumerable:!0,get:function(){return t.values}})})),define("dummy/helpers/w",["exports","ember-cli-string-helpers/helpers/w"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"w",{enumerable:!0,get:function(){return t.w}})})),define("dummy/helpers/without",["exports","ember-composable-helpers/helpers/without"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"without",{enumerable:!0,get:function(){return t.without}})})),define("dummy/helpers/xor",["exports","ember-truth-helpers/helpers/xor"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"xor",{enumerable:!0,get:function(){return t.xor}})})),define("dummy/initializers/add-modals-container",["exports","ember-modal-dialog/initializers/add-modals-container"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n={name:"add-modals-container",initialize:t.default}
e.default=n}))
define("dummy/initializers/container-debug-adapter",["exports","ember-resolver/resolvers/classic/container-debug-adapter"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n={name:"container-debug-adapter",initialize:function(){var e=arguments[1]||arguments[0]
e.register("container-debug-adapter:main",t.default),e.inject("container-debug-adapter:main","namespace","application:main")}}
e.default=n})),define("dummy/initializers/ember-cli-mirage",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default={name:"ember-cli-mirage",initialize:function(){}}})),define("dummy/initializers/ember-concurrency",["exports","ember-concurrency/initializers/ember-concurrency"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/initializers/ember-data",["exports","ember-data/setup-container","ember-data"],(function(e,t,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var r={name:"ember-data",initialize:t.default}
e.default=r})),define("dummy/initializers/ember-keyboard-first-responder-inputs",["exports","ember-keyboard/initializers/ember-keyboard-first-responder-inputs"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return t.initialize}})})),define("dummy/initializers/ember-responsive-breakpoints",["exports","ember-responsive/initializers/responsive"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default
e.default=n})),define("dummy/initializers/es2015-polyfills",["exports"],(function(e){function t(){var e,t,n,r
Array.from||(Array.from=(e=Object.prototype.toString,t=function(t){return"function"==typeof t||"[object Function]"===e.call(t)},n=Math.pow(2,53)-1,r=function(e){var t=function(e){var t=Number(e)
return isNaN(t)?0:0!==t&&isFinite(t)?(t>0?1:-1)*Math.floor(Math.abs(t)):t}(e)
return Math.min(Math.max(t,0),n)},function(e){var n,o,s=this,i=Object(e)
if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined")
var a=arguments.length>1?arguments[1]:void 0
if(void 0!==a){if(!t(a))throw new TypeError("Array.from: when provided, the second argument must be a function")
arguments.length>2&&(n=arguments[2])}for(var d=r(i.length),l=t(s)?Object(new s(d)):new Array(d),c=0;c<d;)o=i[c],l[c]=a?void 0===n?a(o,c):a.call(n,o,c):o,c+=1
return l.length=d,l}))}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=t,e.default=void 0
var n={name:"es2015-polyfills",initialize:t}
e.default=n})),define("dummy/initializers/export-application-global",["exports","dummy/config/environment"],(function(e,t){function n(){var e=arguments[1]||arguments[0]
if(!1!==t.default.exportApplicationGlobal){var n
if("undefined"!=typeof window)n=window
else if("undefined"!=typeof global)n=global
else{if("undefined"==typeof self)return
n=self}var r,o=t.default.exportApplicationGlobal
r="string"==typeof o?o:Ember.String.classify(t.default.modulePrefix),n[r]||(n[r]=e,e.reopen({willDestroy:function(){this._super.apply(this,arguments),delete n[r]}}))}}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=n,e.default=void 0
var r={name:"export-application-global",initialize:n}
e.default=r})),define("dummy/initializers/inject-media",["exports","ember-cli-addon-docs/initializers/inject-media"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return t.initialize}})})),define("dummy/initializers/liquid-fire",["exports","liquid-fire/velocity-ext"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default={name:"liquid-fire",initialize:function(){}}})),define("dummy/initializers/route-anchor-jump",["exports","ember-cli-addon-docs/initializers/route-anchor-jump"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return t.initialize}})})),define("dummy/instance-initializers/ember-data",["exports","ember-data/initialize-store-service"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n={name:"ember-data",initialize:t.default}
e.default=n})),define("dummy/instance-initializers/ember-href-to",["exports","ember-href-to/href-to"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n={name:"ember-href-to",initialize:function(e){if("undefined"==typeof FastBoot){var n=function(n){var r="A"===n.target.tagName?n.target:function(e){if(e.closest)return e.closest("a")
for(e=e.parentElement;e&&"A"!==e.tagName;)e=e.parentElement
return e}(n.target)
r&&new t.default(e,n,r).maybeHandle()}
document.body.addEventListener("click",n),e.reopen({willDestroy:function(){return document.body.removeEventListener("click",n),this._super.apply(this,arguments)}})}}}
e.default=n})),define("dummy/locations/router-scroll",["exports","ember-router-scroll/locations/router-scroll"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/models/address",["exports","@ember-data/model"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default.extend({})
e.default=n})),define("dummy/models/class",["exports","ember-cli-addon-docs/models/class"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/models/comment",["exports","ember-data","ember-cli-addon-docs/utils/compile-markdown"],(function(e,t,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var r=t.default.Model.extend({user:t.default.belongsTo(),body:t.default.attr(),permalink:t.default.attr(),createdAt:t.default.attr(),htmlBody:Ember.computed("body",(function(){return Ember.String.htmlSafe((0,n.default)(this.body))}))})
e.default=r})),define("dummy/models/component",["exports","ember-cli-addon-docs/models/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/models/module",["exports","ember-cli-addon-docs/models/module"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/models/post",["exports","ember-data","js-yaml","ember-cli-addon-docs/utils/compile-markdown"],(function(e,t,n,r){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var o=t.default.Model.extend({comments:t.default.hasMany(),title:t.default.attr(),body:t.default.attr(),issueUrl:t.default.attr(),htmlBody:Ember.computed("body",(function(){return Ember.String.htmlSafe((0,r.default)(this.body))})),meta:Ember.computed("body",(function(){var e=this.body.split("\n").map((function(e){return e.trim()}))
if("\x3c!--"===e[0]){var t=e.indexOf("--\x3e"),r=e.slice(1,t)
return n.default.safeLoad("".concat(r.join("\n")))}})),slugAndId:Ember.computed("slug","id",(function(){return"".concat(this.meta.slug,"-").concat(this.id)}))})
e.default=o})),define("dummy/models/project",["exports","ember-cli-addon-docs/models/project"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/models/user",["exports","ember-data"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default.Model.extend({avatarUrl:t.default.attr(),profileUrl:t.default.attr(),username:t.default.attr()})
e.default=n})),define("dummy/models/word-smith",["exports","@ember-data/model"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default.extend({name:(0,t.attr)(),age:(0,t.attr)(),comments:(0,t.hasMany)("comments"),address:(0,t.belongsTo)("address")})
e.default=n})),define("dummy/modifiers/did-insert",["exports","@ember/render-modifiers/modifiers/did-insert"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/modifiers/did-update",["exports","@ember/render-modifiers/modifiers/did-update"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/modifiers/will-destroy",["exports","@ember/render-modifiers/modifiers/will-destroy"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/pods/application/route",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Route.extend({beforeModel:function(){var e=window.location.pathname;["v0.0.27","v0.0.28","v0.0.29","v0.1.x","v0.2.x","v0.3.x","v0.4.x"].forEach((function(t){e.match("/docs/".concat(t))&&(window.location=e.replace("/docs/".concat(t),"/versions/".concat(t)))}))}})
e.default=t})),define("dummy/pods/application/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"8wefJH2Q",block:'[[[6,[39,0],null,null,[["default"],[[[[6,[30,1,["link"]],["blog"],null,[["default"],[[[[1,"    Blog\\n"]],[]]]]]],[1]]]]],[1,"\\n"],[46,[28,[37,2],null,null],null,null,null],[1,"\\n\\n"],[1,[34,3]],[1,"\\n"]],["header"],false,["docs-header","component","-outlet","docs-keyboard-shortcuts"]]',moduleName:"dummy/pods/application/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/blog/detail/route",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Route.extend({model:function(e){var t=e.post_slug_and_id.match(/\d+$/)
if(!t){var n=document.location.pathname.replace(/^\/|\/$/g,"")
this.transitionTo("not-found",n)}var r=t[0]
return this.store.findRecord("post",r)}})
e.default=t})),define("dummy/pods/blog/detail/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"tLRHM//z",block:'[[[10,0],[14,0,"blog-detail docs-md"],[12],[1,"\\n"],[6,[39,0],null,[["class","route"],["blog-detail__back-link","blog"]],[["default"],[[[[1,"    ← All posts\\n"]],[]]]]],[1,"\\n  "],[10,0],[14,0,"docs-md"],[12],[1,"\\n    "],[10,"time"],[15,"datetime",[33,1,["meta","publishedAt"]]],[12],[1,"\\n      "],[1,[28,[35,2],[[33,1,["meta","publishedAt"]],"MMMM D, YYYY"],null]],[1,"\\n    "],[13],[1,"\\n\\n    "],[10,"h1"],[14,0,"docs-md__h1"],[12],[1,"\\n      "],[1,[33,1,["title"]]],[1,"\\n    "],[13],[1,"\\n\\n    "],[1,[33,1,["htmlBody"]]],[1,"\\n  "],[13],[1,"\\n\\n  "],[10,"hr"],[14,0,"blog-detail__hr"],[12],[13],[1,"\\n\\n  "],[10,0],[14,0,"blog-detail__comments"],[12],[1,"\\n    "],[10,"h2"],[12],[1,"Comments"],[13],[1,"\\n\\n"],[42,[28,[37,4],[[28,[37,4],[[33,1,["comments"]]],null]],null],null,[[[1,"      "],[10,0],[14,0,"blog-detail__comment"],[12],[1,"\\n        "],[10,3],[14,0,"blog-detail__comment-profile-link"],[15,6,[30,1,["user","profileUrl"]]],[12],[1,"\\n          "],[10,"img"],[14,0,"blog-detail__comment-avatar"],[15,"src",[30,1,["user","avatarUrl"]]],[14,"alt","profile"],[12],[13],[1,"\\n        "],[13],[1,"\\n\\n        "],[10,0],[14,0,"blog-detail__comment-body"],[12],[1,"\\n          "],[10,2],[14,0,"blog-detail__comment-info"],[12],[1,"\\n            "],[10,3],[14,0,"blog-detail__username-link"],[15,6,[30,1,["user","profileUrl"]]],[12],[1,"\\n              "],[1,[30,1,["user","username"]]],[1,"\\n            "],[13],[1,"\\n            commented\\n            "],[10,3],[14,0,"blog-detail__comment-permalink"],[15,6,[30,1,["permalink"]]],[12],[1,"\\n              "],[1,[28,[35,5],[[30,1,["createdAt"]]],null]],[1,"\\n            "],[13],[1,"\\n          "],[13],[1,"\\n          "],[1,[30,1,["htmlBody"]]],[1,"\\n        "],[13],[1,"\\n      "],[13],[1,"\\n"]],[1]],null],[1,"\\n    "],[10,2],[14,0,"blog-detail__comments-github-byline"],[12],[1,"\\n      Want to chime in?\\n      "],[10,3],[15,6,[33,1,["issueUrl"]]],[14,0,"blog-detail__comments-github-link"],[12],[1,"\\n"],[1,"        View the thread on GitHub"],[13],[1,".\\n    "],[13],[1,"\\n  "],[13],[1,"\\n"],[13],[1,"\\n"]],["comment"],false,["link-to","model","moment-format","each","-track-array","moment-from"]]',moduleName:"dummy/pods/blog/detail/template.hbs",isStrictMode:!1})
e.default=t}))
define("dummy/pods/blog/error/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"/C8fYgfL",block:'[[[10,"h2"],[12],[1,"We\'re sorry..."],[13],[1,"\\n\\n"],[10,2],[12],[1,"\\n  "],[1,[33,0,["responseJSON","message"]]],[1,"\\n"],[13],[1,"\\n"]],[],false,["model"]]',moduleName:"dummy/pods/blog/error/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/blog/index/route",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Route.extend({model:function(){return this.store.findAll("post")}})
e.default=t})),define("dummy/pods/blog/index/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"w7IfiBTc",block:'[[[10,0],[14,0,"blog-index"],[12],[1,"\\n  "],[10,"h1"],[12],[1,"Blog"],[13],[1,"\\n\\n"],[42,[28,[37,1],[[28,[37,1],[[28,[37,2],["meta.publishedAt:desc",[33,3]],null]],null]],null],null,[[[1,"    "],[10,"section"],[12],[1,"\\n      "],[10,"time"],[15,"datetime",[30,1,["meta","publishedAt"]]],[12],[1,"\\n        "],[1,[28,[35,4],[[30,1,["meta","publishedAt"]],"MMMM D, YYYY"],null]],[1,"\\n      "],[13],[1,"\\n      "],[10,"h2"],[12],[1,"\\n"],[6,[39,5],null,[["route","model"],["blog.detail",[30,1,["slugAndId"]]]],[["default"],[[[[1,"          "],[1,[30,1,["title"]]],[1,"\\n"]],[]]]]],[1,"      "],[13],[1,"\\n    "],[13],[1,"\\n"]],[1]],null],[13],[1,"\\n"]],["post"],false,["each","-track-array","sort-by","model","moment-format","link-to"]]',moduleName:"dummy/pods/blog/index/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/blog/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"3SJFOv6q",block:'[[[10,0],[14,0,"blog"],[12],[1,"\\n  "],[10,0],[14,0,"blog__placeholder"],[12],[1,"\\n  "],[13],[1,"\\n  "],[10,0],[14,0,"blog__content"],[12],[1,"\\n    "],[46,[28,[37,1],null,null],null,null,null],[1,"\\n  "],[13],[1,"\\n"],[13],[1,"\\n"]],[],false,["component","-outlet"]]',moduleName:"dummy/pods/blog/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/advanced/customizing-the-inflector/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"i6opPTpu",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"customizing-the-inflector"],[14,0,"docs-md__h1"],[12],[1,"Customizing the inflector"],[13],[1,"\\n    "],[10,2],[12],[1,"When using Ember Data, you\'ll sometimes find yourself needing to customize the inflection rules used by your models."],[13],[1,"\\n"],[10,2],[12],[1,"For example, say you had an "],[10,"code"],[12],[1,"Advice"],[13],[1," model. By default, Ember\'s inflector pluralizes this as \\"advices\\""],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { pluralize } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-inflector\'"],[13],[1,";\\n\\npluralize("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"advice\\""],[13],[1,"); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// advices"],[13],[13],[13],[1,"\\n"],[10,2],[12],[1,"Ember Data uses these inflection rules for things like building its conventional URLs. For example,"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedJs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".store.findAll("],[10,1],[14,0,"hljs-string"],[12],[1,"\'advice\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"would result in a GET request to "],[10,"code"],[12],[1,"/api/advices"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage also relies on the inflector for its conventions. For example, the resource Shorthand"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".resource("],[10,1],[14,0,"hljs-string"],[12],[1,"\'advice\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"might use inflection rules to try to look up the \\"advices\\" collection or database table."],[13],[1,"\\n"],[10,2],[12],[10,3],[14,6,"https://guides.emberjs.com/release/models/customizing-adapters/#toc_pluralization-customization"],[14,0,"docs-md__a"],[12],[1,"The guides"],[13],[1," document the best way to configure these inflection rules. At the time of this writing, here\'s how you\'d configure the inflector to treat \\"advice\\" as an uncountable word (i.e. a word with no plural form):"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// app/initializers/custom-inflector-rules.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," Inflector "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-inflector\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," "],[10,1],[14,0,"hljs-title"],[12],[1,"initialize"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[10,1],[14,0,"hljs-regexp"],[12],[1,"/* application */"],[13],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"const"],[13],[1," inflector = Inflector.inflector;\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Tell the inflector that the plural of \\"advice\\" is \\"advice\\""],[13],[1,"\\n  inflector.uncountable("],[10,1],[14,0,"hljs-string"],[12],[1,"\'advice\'"],[13],[1,");\\n}\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," {\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'custom-inflector-rules\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"before"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,",\\n  initialize\\n};"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Make sure to use "],[10,"code"],[12],[1,"before: \\"ember-cli-mirage\\""],[13],[1," so this runs before Mirage initializes itself."],[13],[1,"\\n"],[10,2],[12],[1,"As long as you follow this approach, Mirage should respect your custom inflector rules."],[13],[1,"\\n"],[10,2],[12],[1,"With the above rule,"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedJs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".store.findAll("],[10,1],[14,0,"hljs-string"],[12],[1,"\'advice\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"would now result in a "],[10,"code"],[12],[1,"GET"],[13],[1," request to "],[10,"code"],[12],[1,"/api/advice"],[13],[1,", and"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".resource("],[10,1],[14,0,"hljs-string"],[12],[1,"\'advice\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"would respond correctly to that request, as well as correctly handle all other operations to the "],[10,"code"],[12],[1,"Advice"],[13],[1," resource."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/advanced/customizing-the-inflector/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/advanced/environment-options/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"hOpefeVt",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"environment-options"],[14,0,"docs-md__h1"],[12],[1,"Environment options"],[13],[1,"\\n    "],[10,2],[12],[1,"Set these options via the "],[10,"code"],[12],[1,"ENV[\'ember-cli-mirage\']"],[13],[1," variable in your "],[10,"code"],[12],[1,"config/environment.js"],[13],[1," file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// config/environment.js"],[13],[1,"\\n...\\nif (environment === "],[10,1],[14,0,"hljs-string"],[12],[1,"\'production\'"],[13],[1,") {\\n  ENV["],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,"] = {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"enabled"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,"\\n  };\\n}"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"enabled"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#enabled"],[14,0,"heading-anchor"],[12],[1,"enabled"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"By default, your Mirage server will run in test mode, and in development mode as long as the "],[10,"code"],[12],[1,"--proxy"],[13],[1," option isn\'t passed. To change this default behavior, set "],[10,"code"],[12],[1,"enabled"],[13],[1," to either true or false in your ENV config."],[13],[1,"\\n"],[10,2],[12],[1,"For example, to enable in production (e.g. to share a working prototype before your server is ready):"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// config/environment.js"],[13],[1,"\\n...\\nif (environment === "],[10,1],[14,0,"hljs-string"],[12],[1,"\'production\'"],[13],[1,") {\\n  ENV["],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,"] = {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"enabled"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,"\\n  };\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"To disable in development,"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// config/environment.js"],[13],[1,"\\n...\\nif (environment === "],[10,1],[14,0,"hljs-string"],[12],[1,"\'development\'"],[13],[1,") {\\n  ENV["],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,"] = {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"enabled"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"false"],[13],[1,"\\n  };\\n}"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"trackrequests"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#trackrequests"],[14,0,"heading-anchor"],[12],[1,"trackRequests"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Defaults to "],[10,"code"],[12],[1,"false"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"A boolean that controls whether "],[10,3],[14,6,"https://github.com/pretenderjs/pretender#tracking-requests"],[14,0,"docs-md__a"],[12],[1,"Pretender\'s "],[10,"code"],[12],[1,"trackedRequests"],[13],[1," feature"],[13],[1," is enabled. By default it is disabled to avoid memory issues during long development sessions."],[13],[1,"\\n"],[10,2],[12],[1,"To enable, set to "],[10,"code"],[12],[1,"true"],[13],[1,", for example in testing environments:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// config/environment.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,".exports = "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"environment"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"if"],[13],[1," (environment === "],[10,1],[14,0,"hljs-string"],[12],[1,"\'test\'"],[13],[1,") {\\n    ENV["],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,"] = {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"trackRequests"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,"\\n    };\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This feature is useful for asserting against HTTP requests and responses during tests. See the \\"Asserting against handled requests and responses\\" section of the "],[1,[28,[35,0],["Assertions guide","docs.testing.assertions"],null]],[1," to learn more."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"excludefilesfrombuild"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#excludefilesfrombuild"],[14,0,"heading-anchor"],[12],[1,"excludeFilesFromBuild"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Defaults to "],[10,"code"],[12],[1,"false"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"By default, Mirage\'s files are included in your Ember app\'s build in non-production environments. This is in case you want to use Mirage via "],[10,"code"],[12],[1,"ember serve"],[13],[1," by visiting "],[10,"code"],[12],[1,"/tests"],[13],[1,", since that\'s an app with a build-time environment of "],[10,"code"],[12],[1,"development"],[13],[1," but a run-time environment of "],[10,"code"],[12],[1,"test"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"You can explicilty exclude Mirage\'s files from your Ember app\'s build by setting "],[10,"code"],[12],[1,"excludeFilesFromBuild"],[13],[1," to "],[10,"code"],[12],[1,"true"],[13],[1,"."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"usedefaultpassthroughs"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#usedefaultpassthroughs"],[14,0,"heading-anchor"],[12],[1,"useDefaultPassthroughs"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Defaults to "],[10,"code"],[12],[1,"true"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"If true, Mirage will add some default passthrough routes to your server. Currently we add a single route"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[1,"http://localhost:0/chromecheckurl"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,2],[12],[1,"which is used by iOS for URL verification."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"directory"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#directory"],[14,0,"heading-anchor"],[12],[1,"directory"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Configure which directory contains your Mirage server definition. The default directory is "],[10,"code"],[12],[1,"/mirage"],[13],[1," (from the root of your project)."],[13],[1,"\\n"],[10,2],[12],[1,"For example, to have your server definition under "],[10,"code"],[12],[1,"/app/mirage"],[13],[1,","],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// config/environment.js"],[13],[1,"\\n...\\nENV["],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,"] = {\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"directory"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'app/mirage\'"],[13],[1,"\\n};"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"discoveremberdatamodels"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#discoveremberdatamodels"],[14,0,"heading-anchor"],[12],[1,"discoverEmberDataModels"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Tells Mirage whether to automatically infer its schema from the host application\'s Ember Data models and relationships."],[13],[1,"\\n"],[10,2],[12],[1,"Defaults to true. If Ember Data models are present, predefines Mirage\'s models and relationships. If Ember Data models are not present, has no effect."],[13],[1,"\\n"],[10,2],[12],[1,"You can disable by setting to "],[10,"code"],[12],[1,"false"],[13],[1,". You might want to do this if you run into an edge case/issue where the autodiscovery code causes issues in your app\'s environment (for example, if you have a complex engines setup)."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// config/environment.js"],[13],[1,"\\n...\\nENV["],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,"] = {\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"discoverEmberDataModels"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"false"],[13],[1,"\\n};"],[13],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/advanced/environment-options/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/advanced/mocking-guids/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"MuCZZKBc",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"mocking-guids"],[14,0,"docs-md__h1"],[12],[1,"Mocking GUIDs"],[13],[1,"\\n    "],[10,2],[12],[1,"Some applications use GUIDs (or UUIDs) instead of auto-incrementing integers as identifiers for their models."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage supports the ability to overwrite how its database assigns IDs to new records via the "],[10,"code"],[12],[1,"IdentityManager"],[13],[1," class. You can generate model-specific managers or an application-wide manager to customize how your database behaves."],[13],[1,"\\n"],[10,2],[12],[1,"To generate a new identity manager, use the blueprint:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"ember generate mirage-identity-manager <application|modelName>"],[13],[13],[10,2],[12],[1,"A custom identity manager must implement these methods:"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,"code"],[12],[1,"fetch"],[13],[1,", which must return an identifier not used yet."],[13],[1,"\\n"],[10,"li"],[12],[10,"code"],[12],[1,"set"],[13],[1,", which is called with an "],[10,"code"],[12],[1,"id"],[13],[1," of a record being insert in mirage\'s database."],[13],[1,"\\n"],[10,"li"],[12],[10,"code"],[12],[1,"reset"],[13],[1,", which should reset database to initial state."],[13],[1,"\\n"],[13],[1,"\\n      "],[10,2],[12],[1,"Here\'s an example implementation for an identity manager that mocks GUIDs:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { v4 "],[10,1],[14,0,"hljs-keyword"],[12],[1,"as"],[13],[1," getUuid } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-uuid\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-class"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"class"],[13],[1," "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"constructor"],[13],[1,"() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".ids = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"new"],[13],[1," "],[10,1],[14,0,"hljs-built_in"],[12],[1,"Set"],[13],[1,"();\\n  }\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Returns a new unused unique identifier."],[13],[1,"\\n  fetch() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," uuid = getUuid();\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"while"],[13],[1," ("],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".ids.has(uuid)) {\\n      uuid = getUuid();\\n    }\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".ids.add(uuid);\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," uuid;\\n  }\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Registers an identifier as used. Must throw if identifier is already used."],[13],[1,"\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"set"],[13],[1,"(id) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"if"],[13],[1," ("],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".ids.has(id)) {\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"throw"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"new"],[13],[1," "],[10,1],[14,0,"hljs-built_in"],[12],[1,"Error"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"`ID "],[10,1],[14,0,"hljs-subst"],[12],[1,"${id}"],[13],[1," has already been used.`"],[13],[1,");\\n    }\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".ids.add(id);\\n  }\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Resets all used identifiers to unused."],[13],[1,"\\n  reset() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".ids.clear();\\n  }\\n}"],[13],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/advanced/mocking-guids/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/advanced/server-configuration/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"nktamKuI",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"server-configuration"],[14,0,"docs-md__h1"],[12],[1,"Server configuration"],[13],[1,"\\n    "],[10,2],[12],[1,"The MirageJS server is configured for you by ember-cli-mirage. However, if you\\nneed to customize the server you can by creating a makeServer function in the\\nconfig.js."],[13],[1,"\\n"],[10,2],[12],[1,"The named "],[10,"code"],[12],[1,"makeServer"],[13],[1," function export gives you a lower-level way to hook\\ninto how your Ember app instantiates your Mirage JS server."],[13],[1,"\\n"],[10,2],[12],[1,"Typically, the "],[10,"code"],[12],[1,"/mirage/config.js"],[13],[1," file contains a single default export which\\nis a function defining all your Mirage route handlers. Ember CLI Mirage then\\nuses this function, along with all the other modules you\'ve defined in\\n"],[10,"code"],[12],[1,"mirage/models"],[13],[1,", "],[10,"code"],[12],[1,"mirage/fixtures"],[13],[1,", "],[10,"code"],[12],[1,"mirage/factories"],[13],[1,", and\\n"],[10,"code"],[12],[1,"mirage/serializers"],[13],[1,", to create your Mirage JS server when your app boots up\\nin development and testing."],[13],[1,"\\n"],[10,2],[12],[1,"You can now opt in to having more control over exactly how your Mirage server\\nis instantiated, as well as the ability to use imports directly from the\\n"],[10,"code"],[12],[1,"miragejs"],[13],[1," npm package, by exporting a single named function called\\n"],[10,"code"],[12],[1,"makeServer"],[13],[1," instead."],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"makeServer"],[13],[1," receives a single argument called "],[10,"code"],[12],[1,"config"],[13],[1,", which contains all\\nthe factory/fixture/serializer/model modules that exist in your project\'s\\n"],[10,"code"],[12],[1,"/mirage"],[13],[1," directory. This saves you from having to import each module\\nexplicitly and then pass it into your Mirage server, just like you\'re used to\\nwith the default setup."],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"config"],[13],[1," argument maps exactly to everything inside of your "],[10,"code"],[12],[1,"/mirage"],[13],[1,"\\ndirectory - notably, it does not contain the autogenerated Mirage model\\ndefinitions derived from your Ember Data models, which is an important feature\\nof Ember CLI Mirage that is enabled by default. To replicate this behavior\\nwhen using "],[10,"code"],[12],[1,"makeServer"],[13],[1,", we have provided an additional import called\\n"],[10,"code"],[12],[1,"discoverEmberDataModels"],[13],[1," from the "],[10,"code"],[12],[1,"ember-cli-mirage"],[13],[1," package that you can use\\nto augment your config with these models so that your Mirage schema is\\nautomatically inferred from your host application\'s Ember Data models and\\nrelationships. The snippet below shows how to do this. Note that the order\\nhere matters if you also have models defined in your "],[10,"code"],[12],[1,"/mirage/models"],[13],[1,"\\ndirectory, as those model definitions would \\"win\\" in the event of a conflict\\nwith the ones autodiscovered from Ember Data. (However, most of time if you\\nare inferring your Mirage schema from Ember Data, you shouldn\'t need to define\\nadditional models.)"],[13],[1,"\\n"],[10,2],[12],[1,"Finally, your route handlers just need to be passed to the "],[10,"code"],[12],[1,"routes()"],[13],[1," key in\\nyour Mirage config. You can do this inline, or you can make them a separate\\nfunction, and organize that function however you choose."],[13],[1,"\\n"],[10,2],[12],[1,"The only thing needed to enable this behavior is that you delete the default\\nfunction export and instead export a single named function called\\n"],[10,"code"],[12],[1,"makeServer"],[13],[1,". You should also add "],[10,"code"],[12],[1,"miragejs"],[13],[1," to your project\'s dependencies in\\nyour "],[10,"code"],[12],[1,"package.json"],[13],[1," file, since you are now importing directly from it. Note\\nthat this gives you the added benefit of being able to upgrade "],[10,"code"],[12],[1,"miragejs"],[13],[1,"\\nindependently of "],[10,"code"],[12],[1,"ember-cli-mirage"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"Eventually, "],[10,"code"],[12],[1,"ember-cli-mirage"],[13],[1," will shed its re-exports of everything from\\n"],[10,"code"],[12],[1,"miragejs"],[13],[1,", and become a small wrapper library delegating the rest of the work\\nto "],[10,"code"],[12],[1,"miragejs"],[13],[1,". This will help align the Ember Mirage users with the rest of\\nthe Mirage JS community."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjavascript"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Example with inline routes"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { createServer, discoverEmberDataModels } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," "],[10,1],[14,0,"hljs-title"],[12],[1,"makeServer"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"config"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," finalConfig = {\\n    ...config,\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"models"],[13],[1,": { ...discoverEmberDataModels(), ...config.models },\\n    routes() {\\n      "],[10,1],[14,0,"hljs-comment"],[12],[1,"// this.namespace = \'/api\'"],[13],[1,"\\n\\n      "],[10,1],[14,0,"hljs-comment"],[12],[1,"// this.resource(\'user\')"],[13],[1,"\\n    },\\n  };\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," createServer(finalConfig);\\n}\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Example with routes in an external function"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { createServer, discoverEmberDataModels } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," "],[10,1],[14,0,"hljs-title"],[12],[1,"makeServer"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"config"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," finalConfig = {\\n    ...config,\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"models"],[13],[1,": { ...discoverEmberDataModels(), ...config.models },\\n    routes,\\n  };\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," createServer(finalConfig);\\n}\\n\\n"],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," "],[10,1],[14,0,"hljs-title"],[12],[1,"routes"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// this.namespace = \'/api\'"],[13],[1,"\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// this.resource(\'user\')"],[13],[1,"\\n}"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"serializers"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#serializers"],[14,0,"heading-anchor"],[12],[1,"Serializers"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"If you would like to have Mirage adjust or create your serializers for you from your ember data serializers adjust your \\nserver configuration to have mirage perform this for you."],[13],[1,"\\n"],[10,2],[12],[1,"When Mirage auto discovers your ember data models, should you also have the same model defined in mirage, it will use the mirage\\nversion of the model. With serializers, you may have created a mirage serializer to override some methods, but would still \\nlike Mirage to apply the primaryKey and transforms. For that reason the method to apply these properties is different than\\nthe way you merge the models."],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"applyEmberDataSerializers"],[13],[1," will apply the "],[10,"code"],[12],[1,"primaryKey"],[13],[1," and "],[10,"code"],[12],[1,"attrs"],[13],[1," from your ember data serializers to your mirage serializers.\\nIf you have not created a mirage serializer it will create one and extend it from your mirage application serializer.\\nEnsure your application serializer extends from EmberDataSerializer as the default JSONApiSerializer will not understand \\nhow to use "],[10,"code"],[12],[1,"primaryKey"],[13],[1," and "],[10,"code"],[12],[1,"transforms"],[13],[1,". If you have not created a mirage serializer named application, the created serializer \\nwill extend EmberDataSerializer directly."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjavascript"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Example of having Mirage adjust/create your serializers similiar to ember data models"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { createServer, discoverEmberDataModels, applyEmberDataSerializers } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," "],[10,1],[14,0,"hljs-title"],[12],[1,"makeServer"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"config"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," finalConfig = {\\n    ...config,\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"models"],[13],[1,": { ...discoverEmberDataModels(), ...config.models },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"serializers"],[13],[1,": applyEmberDataSerializers(config.serializers),\\n    routes,\\n  };\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," createServer(finalConfig);\\n}\\n\\n"],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," "],[10,1],[14,0,"hljs-title"],[12],[1,"routes"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// this.namespace = \'/api\'"],[13],[1,"\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// this.resource(\'user\')"],[13],[1,"\\n}"],[13],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/advanced/server-configuration/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/advanced/simulating-cookie-responses/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"K8hwwHIv",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"simulating-cookie-responses"],[14,0,"docs-md__h1"],[12],[1,"Simulating cookie responses"],[13],[1,"\\n    "],[10,2],[12],[1,"Although Mirage allows setting headers in a response, the\\nXMLHttpRequest spec explicitly\\n"],[10,3],[14,6,"http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method"],[14,0,"docs-md__a"],[12],[1,"forbids access"],[13],[1,"\\nto "],[10,"code"],[12],[1,"Set-Cookie"],[13],[1," and "],[10,"code"],[12],[1,"Set-Cookie2"],[13],[1," headers.  As a result Mirage\\nresponses cannot set cookies via headers."],[13],[1,"\\n"],[10,2],[12],[1,"However, you can simulate receiving cookies from an ajax\\ncall at the browser level by setting them in a route\\nfunction handler:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/users/login\'"],[13],[1,", schema => {\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// log in for 24 hours"],[13],[1,"\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," now = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"new"],[13],[1," "],[10,1],[14,0,"hljs-built_in"],[12],[1,"Date"],[13],[1,"();\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," cookieExpiration = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"new"],[13],[1," "],[10,1],[14,0,"hljs-built_in"],[12],[1,"Date"],[13],[1,"(now.getTime() + ("],[10,1],[14,0,"hljs-number"],[12],[1,"24"],[13],[1," * "],[10,1],[14,0,"hljs-number"],[12],[1,"3600"],[13],[1," * "],[10,1],[14,0,"hljs-number"],[12],[1,"1000"],[13],[1,"));\\n  "],[10,1],[14,0,"hljs-built_in"],[12],[1,"document"],[13],[1,".cookie="],[10,1],[14,0,"hljs-string"],[12],[1,"`remember_me=cookie-content-here; domain=.dev-domain; path=/; expires="],[10,1],[14,0,"hljs-subst"],[12],[1,"${cookieExpiration.toUTCString()}"],[13],[1,";`"],[13],[1,";\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.users.find("],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,");\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Your Ember client code will now have access to any cookies set\\nusing "],[10,"code"],[12],[1,"document.cookie"],[13],[1,"."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/advanced/simulating-cookie-responses/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/advanced/switching-between-scenarios/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"2K67Bp8/",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"switching-between-scenarios"],[14,0,"docs-md__h1"],[12],[1,"Switching between scenarios"],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage adds a "],[10,"code"],[12],[1,"/scenarios"],[13],[1," directory to your project, where you\'ll find a "],[10,"code"],[12],[1,"default.js"],[13],[1," file.\\nThe function in this file will run in development mode and act as your \\"development seeds\\".\\nIn testing it\'s ignored, so that your Mirage server starts out with a clean database. You\\ncan then use each test to seed Mirage as needed for that test. In this way, each test acts\\nas its own Mirage scenario."],[13],[1,"\\n"],[10,2],[12],[1,"Originally Mirage was going to add first-class support for development-time scenario switching,\\nbut currently only the "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file is used by Mirage. However, you can use various\\nstrategies to configure the behavior of your default scenario, to support multiple development\\nserver states or to facilitate things like running "],[10,3],[14,6,"https://en.wikipedia.org/wiki/Acceptance_testing#User_acceptance_testing"],[14,0,"docs-md__a"],[12],[1,"user acceptance testing"],[13],[1,".\\nFor example, you might want to test whether a user can complete a set of tasks specific to unique circumstances defined in a scenario."],[13],[1,"\\n"],[10,2],[12],[1,"One strategy you could take is to configure your default scenario file to honor options passed\\nto the runtime environment. For example, say you wanted to be able to run a scenario file like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedbash"],[12],[1,"MIRAGE_SCENARIO=some-scenario ember s"],[13],[13],[1,"\\n"],[10,2],[12],[1,"To affect the behavior of "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1,", add the "],[10,"code"],[12],[1,"MIRAGE_SCENARIO"],[13],[1," ENV variable to your "],[10,"code"],[12],[1,"environment/config.js"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"const"],[13],[1," { MIRAGE_SCENARIO } = process.env;\\n\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,".exports = "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"environment"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"const"],[13],[1," ENV = {\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ...other stuff"],[13],[1,"\\n\\n    MIRAGE_SCENARIO,\\n\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ...other stuff"],[13],[1,"\\n  };\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," ENV;\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Then access this new config variable in your "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," ENV "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'../../config/environment\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," visitor "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./visitor\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," subscriber "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./subscriber\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," administrator "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./administrator\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"const"],[13],[1," scenarios = {\\n  visitor,\\n  subscriber,\\n  administrator\\n}\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"const"],[13],[1," activeScenario = ENV.MIRAGE_SCENARIO || "],[10,1],[14,0,"hljs-string"],[12],[1,"\'visitor\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"const"],[13],[1," scenario = scenarios[activeScenario];\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"if"],[13],[1," (scenario) {\\n    scenario(server);\\n  }\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// plus whatever default scenario code you want"],[13],[1,"\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Like other Mirage objects, all scenario files must export a function like so:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// server.createList(\'post\', 15);"],[13],[1,"\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note that the "],[10,"code"],[12],[1,"server"],[13],[1," parameter is not provided by default."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/advanced/switching-between-scenarios/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/database/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"i7tix8tY",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"the-database"],[14,0,"docs-md__h1"],[12],[1,"The Database"],[13],[1,"\\n    "],[10,2],[12],[1,"At the core of Mirage\'s data layer is a simple in-memory database. This database stores all of Mirage\'s initial state, and then your route handlers access and modify that state as you use your application."],[13],[1,"\\n"],[10,2],[12],[1,"The database is what allows Mirage to mimic a production server, giving you the ability to write complete dynamic features in your Ember app."],[13],[1,"\\n"],[10,2],[12],[1,"Most of your Mirage code will not access the database directly, but rather will interact with it through Mirage\'s ORM. We\'ll cover the ORM in the next section of these guides."],[13],[1,"\\n"],[10,2],[12],[1,"However, it\'s good to know that whether or not you use the ORM, you can always interact with the database directly."],[13],[1,"\\n"],[10,2],[12],[1,"For example, you could seed it with some data in "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.db.loadData({\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n      { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1," },\\n      { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Inception\'"],[13],[1," },\\n      { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dunkirk\'"],[13],[1," },\\n    ]\\n  });\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and then can access it in your route handlers using the "],[10,"code"],[12],[1,"schema"],[13],[1," argument:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.db.movies;\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This route handler would then respond with the data you loaded:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"[\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Inception\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dunkirk\'"],[13],[1," }\\n]"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note that each record has an "],[10,"code"],[12],[1,"id"],[13],[1," field, since the database assigns all new records an auto-incrementing ID."],[13],[1,"\\n"],[10,2],[12],[1,"The most common place you\'ll use the database directly is in your tests, where you can access it via "],[10,"code"],[12],[1,"this.server.db"],[13],[1,". It can be useful to assert against the state of Mirage\'s database to verify that your Ember app\'s network requests are sending over the correct data."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// tests/movie-test.js"],[13],[1,"\\ntest("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can create a movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/new\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," fillIn("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.title\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'The Dark Knight\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.submit\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'h2\'"],[13],[1,").includesText("],[10,1],[14,0,"hljs-string"],[12],[1,"\'New movie saved!\'"],[13],[1,");\\n  assert.equal("],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.db.movies["],[10,1],[14,0,"hljs-number"],[12],[1,"0"],[13],[1,"].title, "],[10,1],[14,0,"hljs-string"],[12],[1,"\'The Dark Knight\'"],[13],[1,");\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"You can view the rest of the Database APIs in the "],[1,[28,[35,0],["Db","docs.api.item","modules/db~Db"],null]],[1," and "],[1,[28,[35,0],["DbCollection","docs.api.item","modules/db-collection~DbCollection"],null]],[1," API reference."],[13],[1,"\\n"],[10,2],[12],[1,"Next, we\'ll learn about Mirage\'s ORM."],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/data-layer/database/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/factories/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"9ECUg11l",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"factories"],[14,0,"docs-md__h1"],[12],[1,"Factories"],[13],[1,"\\n    "],[10,2],[12],[1,"One of the main benefits of using Mirage is the ability to quickly put your server into different states."],[13],[1,"\\n"],[10,2],[12],[1,"For example, you might be developing a feature and want to see how the UI renders for both a logged-in user and an anonymous user. This is the kind of thing that\'s a pain when using a real backend server, but with Mirage it\'s as simple as flipping a JavaScript variable and live-reloading your Ember app."],[13],[1,"\\n"],[10,2],[12],[10,"strong"],[12],[1,"Factories"],[13],[1," are classes that help you organize your data-creation logic, making it easier to define different server states during development or within tests."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s see how they work."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"defining-factories"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#defining-factories"],[14,0,"heading-anchor"],[12],[1,"Defining factories"],[13],[13],[1,"\\n    \\n      "],[10,"h3"],[14,1,"your-first-factory"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#your-first-factory"],[14,0,"heading-anchor"],[12],[1,"Your first factory"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Say we have a "],[10,"code"],[12],[1,"Movie"],[13],[1," model defined in Mirage. (Remember, if you\'re using Ember Data you won\'t have this file on disk. The Model definition will be automatically generated for you.)"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"To seed Mirage\'s database with some movies so you can start developing your app, use the "],[10,"code"],[12],[1,"server.create"],[13],[1," method in the "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n\\n  server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,");\\n\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"server.create"],[13],[1," takes the singular hyphenated form of your model\'s class name as its first argument."],[13],[1,"\\n"],[10,2],[12],[1,"Because we have no Factory defined for a "],[10,"code"],[12],[1,"Movie"],[13],[1,", "],[10,"code"],[12],[1,"server.create(\'movie\')"],[13],[1," will just create an empty record and insert it into the database:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// server.db.dump();"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1," }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Not a very interesting record."],[13],[1,"\\n"],[10,2],[12],[1,"However, we can pass attributes of our own as the second argument to "],[10,"code"],[12],[1,"server.create"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n\\n  server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'10/26/2014\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,"\\n  });\\n\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now our database looks like this"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'10/26/2014\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,"\\n    }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and we\'ll actually be able to develop our UI against realistic data."],[13],[1,"\\n"],[10,2],[12],[1,"This is a great way to start, but it can be cumbersome to manually define every attribute (and relationship) when working on data-driven applications. It would be nice if we had a way to dynamically generate some of these attributes."],[13],[1,"\\n"],[10,2],[12],[1,"Fortunately, that\'s exactly what Factories let us do!"],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s generate a Factory for our movie using"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"ember g mirage-factory movie"],[13],[13],[10,2],[12],[1,"which creates this file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Right now the Factory is empty. Let\'s define a property on it:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie title\'"],[13],[1,"\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now "],[10,"code"],[12],[1,"server.create(\'movie\')"],[13],[1," will use the properties from this factory. The inserted record will look like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie title\'"],[13],[1," }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"We can also make this property a function."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  title(i) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"`Movie "],[10,1],[14,0,"hljs-subst"],[12],[1,"${i}"],[13],[1,"`"],[13],[1,";\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"i"],[13],[1," is an incrementing index that lets us make our factory attributes more dynamic."],[13],[1,"\\n"],[10,2],[12],[1,"If we use the "],[10,"code"],[12],[1,"server.createList"],[13],[1," method, we can quickly generate five movies"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and with the above factory definition, our database will look like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 1\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 2\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 3\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'4\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 4\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'5\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 5\'"],[13],[1," }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s add some more properties to our factory:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," faker "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'faker\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  title(i) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"`Movie "],[10,1],[14,0,"hljs-subst"],[12],[1,"${i}"],[13],[1,"`"],[13],[1,";\\n  },\\n\\n  releaseDate() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," faker.date.past().toLocaleDateString();\\n  },\\n\\n  genre(i) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," genres = [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Drama\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Comedy\'"],[13],[1," ];\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," genres[i % genres.length];\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Here we\'ve installed the "],[10,3],[14,6,"https://github.com/marak/Faker.js/"],[14,0,"docs-md__a"],[12],[1,"Faker.js"],[13],[1," library to help us generate random dates."],[13],[1,"\\n"],[10,2],[12],[1,"Now "],[10,"code"],[12],[1,"server.createList(\'movie\', 5)"],[13],[1," gives us this data:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'5/14/2018\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 2\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2/22/2019\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Drama\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 3\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'6/2/2018\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Comedy\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'4\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 4\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'7/29/2018\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'5\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 5\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'6/30/2018\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Drama\'"],[13],[1," },\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"As you can see, Factories let us rapidly generate different scenarios for our dynamic server data."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"attribute-overrides"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#attribute-overrides"],[14,0,"heading-anchor"],[12],[1,"Attribute overrides"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Factories are great for defining the \\"base case\\" of your models, but there\'s plenty of times where you\'ll want to override attributes from your factory with specific values."],[13],[1,"\\n"],[10,2],[12],[1,"The last argument to "],[10,"code"],[12],[1,"create"],[13],[1," and "],[10,"code"],[12],[1,"createList"],[13],[1," accepts a POJO of attributes that will override anything from your factory."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Using only the base factory"],[13],[1,"\\nserver.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// gives us this object:"],[13],[1,"\\n{ "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'01/01/2000\'"],[13],[1," }\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Passing in specific values to override certain attributes"],[13],[1,"\\nserver.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1," });\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// gives us this object:"],[13],[1,"\\n{ "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'01/01/2000\'"],[13],[1," }"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Think of your factory attributes as a reasonable \\"base case\\" for your models, and then override them in development and testing scenarios as you have need for specific values."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"dependent-attributes"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#dependent-attributes"],[14,0,"heading-anchor"],[12],[1,"Dependent attributes"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Attributes can depend on other attributes via "],[10,"code"],[12],[1,"this"],[13],[1," from within a function. This can be useful for quickly generating things like usernames from names:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/user.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," faker "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'faker\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  name() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," faker.name.findName();\\n  },\\n\\n  username() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".name.replace("],[10,1],[14,0,"hljs-string"],[12],[1,"\' \'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'\'"],[13],[1,").toLowerCase();\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Calling "],[10,"code"],[12],[1,"server.createList(\'user\', 3)"],[13],[1," with this factory would generate this data:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"[\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Retha Donnelly\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"username"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'rethadonnelly\'"],[13],[1," }\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Crystal Schaefer\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"username"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'crystalschaefer\'"],[13],[1," }\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Jerome Schoen\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"username"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'jeromeschoen\'"],[13],[1," }\\n]"],[13],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"relationships"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#relationships"],[14,0,"heading-anchor"],[12],[1,"Relationships"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"In the same way that you use the ORM to create relational data, as this example from the "],[10,"em"],[12],[1,"Creating and editing related data"],[13],[1," section of the "],[1,[28,[35,0],["ORM guide","docs.data-layer.orm"],null]],[1," illustrates"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," nolan = schema.people.create({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Christopher Nolan\'"],[13],[1," });\\n\\nschema.movies.create({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"director"],[13],[1,": nolan,\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"you can also create relational data with your factories:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," nolan = server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'director\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Christopher Nolan\'"],[13],[1," });\\n\\nserver.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", {\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"director"],[13],[1,": nolan,\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"nolan"],[13],[1," is a model instance, which is why we can just pass it in as an attribute override when creating the Interstellar movie."],[13],[1,"\\n"],[10,2],[12],[1,"This also works when using "],[10,"code"],[12],[1,"createList"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'actor\'"],[13],[1,", {\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,")\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"In this way you use factories to help you quickly create graphs of relational data:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1,").forEach("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"user"],[13],[1," =>"],[13],[1," {\\n  server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,", { user }).forEach("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"post"],[13],[1," =>"],[13],[1," {\\n    server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'comment\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1,", { post });\\n  });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This code generates 5 users, each of which has 10 posts with each post having 5 comments. Assuming these relationships are defined in your models, all the foreign keys would be set correctly in Mirage\'s database."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"the-aftercreate-hook"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#the-aftercreate-hook"],[14,0,"heading-anchor"],[12],[1,"The afterCreate hook"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"In many cases, setting up relationships manually (as shown in the previous section) is perfectly fine. However there are times where it makes more sense to have base case relationships set up for you automatically."],[13],[1,"\\n"],[10,2],[12],[1,"Enter "],[10,"code"],[12],[1,"afterCreate"],[13],[1,". It\'s a hook that\'s called after a model has been created using the factory\'s base attributes. This hook lets you perform additional logic on your newly-created models before they\'re returned from "],[10,"code"],[12],[1,"create"],[13],[1," and "],[10,"code"],[12],[1,"createList"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s see how it works."],[13],[1,"\\n"],[10,2],[12],[1,"Say you have these two models in your app:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/user.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"post"],[13],[1,": belongsTo()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s further suppose that in your app, it is never valid to create a post without an associated user."],[13],[1,"\\n"],[10,2],[12],[1,"You can use "],[10,"code"],[12],[1,"afterCreate"],[13],[1," to enforce this behavior:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  afterCreate(post, server) {\\n    post.update({\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,")\\n    });\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The first argument to "],[10,"code"],[12],[1,"afterCreate"],[13],[1," is the object that was just created (in this case the "],[10,"code"],[12],[1,"post"],[13],[1,"), and the second is a reference to the Mirage server instance, so that you can invoke other factories or inspect any other server state needed to customize your newly-created object."],[13],[1,"\\n"],[10,2],[12],[1,"In this example we\'re immediately creating a user for this post. That way elsewhere in your app (say a test), you could just create a post"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and you\'d be working with a valid record, since that post would have an associated user."],[13],[1,"\\n"],[10,2],[12],[1,"Now, there\'s one problem with the way we\'ve implemented this so far. Our "],[10,"code"],[12],[1,"afterCreate"],[13],[1," hook updates the post\'s user "],[10,"em"],[12],[1,"regardless if that post already had a user associated with it"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"That means that this code"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," tomster = server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Tomster\'"],[13],[1,");\\nserver.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": tomster });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"would not work as we expect, since the attribute overrides while the object is being created, but the logic in "],[10,"code"],[12],[1,"afterCreate"],[13],[1," runs "],[10,"em"],[12],[1,"after"],[13],[1," the post has been created. Thus, this post would be associated with the newly created post from the hook, rather than Tomster."],[13],[1,"\\n"],[10,2],[12],[1,"To fix this, we can update our "],[10,"code"],[12],[1,"afterCreate"],[13],[1," hook to first check if the newly created post already has a user associated with it. Only if it doesn\'t will we create a new one and update the relationship."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  afterCreate(post, server) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"if"],[13],[1," (!post.user) {\\n      post.update({\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,")\\n      });\\n    }\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now callers can pass in specific users"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": tomster });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"or omit specifying a user if the details of that user aren\'t important"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and in both cases they\'ll end up with a valid record."],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"afterCreate"],[13],[1," can also be used to create "],[10,"code"],[12],[1,"hasMany"],[13],[1," associations, as well as apply any other relevant creation logic."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"traits"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#traits"],[14,0,"heading-anchor"],[12],[1,"Traits"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Traits are an important feature of factories that make it easy to group related attributes. Define them by importing "],[10,"code"],[12],[1,"trait"],[13],[1," and adding a new key to your factory."],[13],[1,"\\n"],[10,2],[12],[1,"For example, here we define a trait named "],[10,"code"],[12],[1,"published"],[13],[1," on our post factory:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory, trait } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Lorem ipsum\'"],[13],[1,",\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"published"],[13],[1,": trait({\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"isPublished"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"publishedAt"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2010-01-01 10:00:00\'"],[13],[1,"\\n  })\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"You can pass anything into "],[10,"code"],[12],[1,"trait"],[13],[1," that you can into the base factory."],[13],[1,"\\n"],[10,2],[12],[1,"We can use our new trait by passing in the name of the trait as a string argument to "],[10,"code"],[12],[1,"create"],[13],[1," or "],[10,"code"],[12],[1,"createList"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'published\'"],[13],[1,");\\nserver.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'published\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The created posts will have all the base attributes, as well as everything under the "],[10,"code"],[12],[1,"published"],[13],[1," trait."],[13],[1,"\\n"],[10,2],[12],[1,"You can also compose multiple traits together:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory, trait } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Lorem ipsum\'"],[13],[1,",\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"published"],[13],[1,": trait({\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"isPublished"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"publishedAt"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2010-01-01 10:00:00\'"],[13],[1,"\\n  }),\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"official"],[13],[1,": trait({\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"isOfficial"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,"\\n  })\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"We can pass our new traits into "],[10,"code"],[12],[1,"create"],[13],[1," or "],[10,"code"],[12],[1,"createList"],[13],[1," in any order:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," officialPost = server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'official\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," officialPublishedPost = server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'official\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'published\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If multiple traits set the same attribute, the last trait wins."],[13],[1,"\\n"],[10,2],[12],[1,"As always, you can pass in an object of attribute overrides as the last argument:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'published\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'My first post\'"],[13],[1," });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"When combined with the "],[10,"code"],[12],[1,"afterCreate()"],[13],[1," hook, traits simplify the process of setting up related object graphs."],[13],[1,"\\n"],[10,2],[12],[1,"Here we define a "],[10,"code"],[12],[1,"withComments"],[13],[1," trait that creates 3 comments for a newly created post:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory, trait } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Lorem ipsum\'"],[13],[1,",\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"withComments"],[13],[1,": trait({\\n    afterCreate(post, server) {\\n      server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'comment\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,", { post });\\n    }\\n  })\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"We can use this trait to quickly make 10 posts with 3 comments each:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'withComments\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Combining traits with the "],[10,"code"],[12],[1,"afterCreate"],[13],[1," hook is one of the most powerful features of Mirage factories. Effective use of this technique will dramatically simplify the process of creating different graphs of relational data for your app."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"the-association-helper"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#the-association-helper"],[14,0,"heading-anchor"],[12],[1,"The association helper"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"association()"],[13],[1," helper provides some sugar for creating "],[10,"code"],[12],[1,"belongsTo"],[13],[1," relationships."],[13],[1,"\\n"],[10,2],[12],[1,"As we saw earlier, given a "],[10,"code"],[12],[1,"Post"],[13],[1," that "],[10,"code"],[12],[1,"belongsTo"],[13],[1," a "],[10,"code"],[12],[1,"User"],[13],[1,", we were able to use the "],[10,"code"],[12],[1,"afterCreate"],[13],[1," hook to pre-wire that relationship:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  afterCreate(post, server) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"if"],[13],[1," (!post.user) {\\n      post.update({\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,")\\n      });\\n    }\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"association()"],[13],[1," helper effectively replaces this code:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory, association } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": association()\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This should help reduce some of the boilerplate in your factory definitions."],[13],[1,"\\n"],[10,2],[12],[1,"You can also use "],[10,"code"],[12],[1,"association()"],[13],[1," within traits"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory, association, trait } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"withUser"],[13],[1,": trait({\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": association()\\n  })\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and it also accepts additional traits and overrides for the related model\'s factory:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory, association, trait } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"withUser"],[13],[1,": trait({\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"user"],[13],[1,": association("],[10,1],[14,0,"hljs-string"],[12],[1,"\'admin\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"role"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'editor\'"],[13],[1," })\\n  })\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"There is no equivalent helper for "],[10,"code"],[12],[1,"hasMany"],[13],[1," relationships, so you can continue to use the "],[10,"code"],[12],[1,"afterCreate"],[13],[1," hook to seed those relationships."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"using-factories"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#using-factories"],[14,0,"heading-anchor"],[12],[1,"Using factories"],[13],[13],[1,"\\n    \\n      "],[10,"h3"],[14,1,"in-development"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#in-development"],[14,0,"heading-anchor"],[12],[1,"In development"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To use your factories to seed your development database, call "],[10,"code"],[12],[1,"server.create"],[13],[1," and "],[10,"code"],[12],[1,"server.createList"],[13],[1," in your "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,");\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"There\'s no explicit API for switching scenarios in development, but you can just use JavaScript modules to split things up."],[13],[1,"\\n"],[10,2],[12],[1,"For example, you could create a new file for each scenario that contains some seeding logic"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/admin.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"isAdmin"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1," });\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"...export all scenarios as an object from an "],[10,"code"],[12],[1,"index.js"],[13],[1," file"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/index.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," anonymous "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./anonymous\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," subscriber "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./subscriber\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," admin "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./admin\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," scenarios = {\\n  anonymous,\\n  subscriber,\\n  admin\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"...and then import that object into "],[10,"code"],[12],[1,"default.js"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"Now you can quickly switch your development state by changing a single variable:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," scenarios "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./index\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Choose one"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"const"],[13],[1," state =\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// \'anonymous\'"],[13],[1,"\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// \'subscriber\'"],[13],[1,"\\n  "],[10,1],[14,0,"hljs-string"],[12],[1,"\'admin\'"],[13],[1,"\\n;\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  scenarios[state](server);\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This can be handy while developing your app or sharing the different states of a new feature with your team."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"in-testing"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#in-testing"],[14,0,"heading-anchor"],[12],[1,"In testing"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"When running your app in the "],[10,"code"],[12],[1,"test"],[13],[1," environment, your entire Mirage server is loaded, "],[10,"em"],[12],[1,"except"],[13],[1," for your "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file."],[13],[1,"\\n"],[10,2],[12],[1,"That means each test starts out with a clean database, giving you the opportunity to set up only the state needed for that test. It also keeps your development scenarios isolated from your tests, so that you don\'t inadvertently break your test suite while tweaking your development scenario."],[13],[1,"\\n"],[10,2],[12],[1,"To seed Mirage\'s database within a test, use "],[10,"code"],[12],[1,"this.server"],[13],[1," to access the "],[10,"code"],[12],[1,"create"],[13],[1," and "],[10,"code"],[12],[1,"createList"],[13],[1," methods:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can see the movies on the homepage\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'li.movie\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"length"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1," });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"In this test, we start our Mirage server out with 5 movies. Then we boot up the Ember app and visit the "],[10,"code"],[12],[1,"/"],[13],[1," route, and finally assert that those movies show up in our UI."],[13],[1,"\\n"],[10,2],[12],[1,"When we write another test, the database will start out empty so that none of Mirage\'s state leaks across tests."],[13],[1,"\\n"],[10,2],[12],[1,"You can read more about testing with Mirage in the "],[1,[28,[35,0],["Testing","docs.testing.acceptance-tests"],null]],[1," section of these guides."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"factory-best-practices"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#factory-best-practices"],[14,0,"heading-anchor"],[12],[1,"Factory best practices"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"In general, it\'s best to define a model\'s base factory using only the attributes and relationships that comprise the minimal valid state for that model. You can then use "],[10,"code"],[12],[1,"afterCreate"],[13],[1," and traits to define other common states that contain valid, related changes on top of the base case."],[13],[1,"\\n"],[10,2],[12],[1,"This advice goes a long way towards keeping your test suite maintainable."],[13],[1,"\\n"],[10,2],[12],[1,"If you don\'t use traits and "],[10,"code"],[12],[1,"afterCreate"],[13],[1,", your tests will become bogged down in irrelevant details related to setting up the data needed for that test."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can see the title of a post\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," session = server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'session\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," user = server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,", { session });\\n  server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", {\\n    user,\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'My first post\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"slug"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'my-first-post\'"],[13],[1,"\\n  });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/post/my-first-post\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'h1\'"],[13],[1,").hasText("],[10,1],[14,0,"hljs-string"],[12],[1,"\'My first post\'"],[13],[1,");\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This test is only concerned with asserting the title of a post gets rendered to the screen, but it has lots of boilerplate code that\'s only there to get the post in a valid state."],[13],[1,"\\n"],[10,2],[12],[1,"If we used "],[10,"code"],[12],[1,"afterCreate"],[13],[1," instead, the developer writing this test could simply create a post with a specified "],[10,"code"],[12],[1,"title"],[13],[1," and "],[10,"code"],[12],[1,"slug"],[13],[1,", since those are the only details relevant to the test:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can see the title of a post\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,", {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'My first post\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"slug"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'my-first-post\'"],[13],[1,"\\n  });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/post/my-first-post\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'h1\'"],[13],[1,").hasText("],[10,1],[14,0,"hljs-string"],[12],[1,"\'My first post\'"],[13],[1,");\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"afterCreate"],[13],[1," could take care of setting up the session and user in valid states, and associating the user with the post, so that the test can stay concise and focused on what it\'s actually testing."],[13],[1,"\\n"],[10,2],[12],[1,"Effective use of traits and "],[10,"code"],[12],[1,"afterCreate"],[13],[1," keeps your test suite less brittle and more robust to changes in your data layer, since tests only declare the bare minimum setup logic needed to verify their assertions."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"Up next, we\'ll take a look at how to use Fixtures as an alternative way to seed your database."],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/data-layer/factories/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/fixtures/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"IoqAuWMW",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"fixtures"],[14,0,"docs-md__h1"],[12],[1,"Fixtures"],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage also lets you use flat fixture files to seed your database with data."],[13],[1,"\\n"],[10,2],[12],[1,"In general, we recommend using factories for most situations, since they tend to keep your mock data more maintainable. But there are certainly times where fixture data makes sense."],[13],[1,"\\n"],[10,2],[12],[1,"Fixtures are nothing more than a conventional file-based way to accomplish the following:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.db.loadData({\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"countries"],[13],[1,": [\\n      { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'China\'"],[13],[1," },\\n      { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'India\'"],[13],[1," },\\n      { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'United States\'"],[13],[1," }\\n    ]\\n  });\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s see how we can do the same thing using fixtures."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"basic-usage"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#basic-usage"],[14,0,"heading-anchor"],[12],[1,"Basic usage"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"We\'ll start by generating a fixture file for our "],[10,"code"],[12],[1,"Country"],[13],[1," model:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"ember g mirage-fixture countries"],[13],[13],[10,2],[12],[1,"Fixture filenames should be the dasherized plural form of the model class."],[13],[1,"\\n"],[10,2],[12],[1,"We can now add some data to our fixture file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/fixtures/countries.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," [\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'China\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Shanghai\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'India\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Mumbai\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'United States\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'New York City\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"4"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Indonesia\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Jakarta\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Pakistan\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Karachi\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"6"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Brazil\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'São Paulo\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"7"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Nigeria\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Lagos\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"8"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Bangladesh\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dhaka\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"9"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Russia\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Moscow\'"],[13],[1," },\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Mexico\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"largestCity"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Mexico City\'"],[13],[1," },\\n];"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Because this data will be read directly into Mirage\'s database, we want to use camelCase for all multi-word attributes. (Mirage uses the camelCasing convention to avoid configuration for things like identifying foreign keys.)"],[13],[1,"\\n"],[10,2],[12],[1,"Don\'t worry if your production API format doesn\'t use camelCase. We\'ll be able to customize Mirage\'s API format in the Serializer layer."],[13],[1,"\\n"],[10,2],[12],[1,"To load our new fixture file into the database during development, we can call "],[10,"code"],[12],[1,"server.loadFixtures"],[13],[1," in our "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.loadFixtures();\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If we have multiple fixtures defined, "],[10,"code"],[12],[1,"server.loadFixtures()"],[13],[1," will load every file. You can load files selectively by passing in an argument list of fixture names to "],[10,"code"],[12],[1,"loadFixtures"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.loadFixtures("],[10,1],[14,0,"hljs-string"],[12],[1,"\'countries\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'cities\'"],[13],[1,"); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// only load the countries and cities fixtures"],[13],[1,"\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Just like with factories, fixtures will be ignored during tests. If you want to load fixture data in a test, you can call "],[10,"code"],[12],[1,"this.server.loadFixtures"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can see the countries\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.loadFixtures("],[10,1],[14,0,"hljs-string"],[12],[1,"\'countries\'"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'option.country\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"length"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"100"],[13],[1," });\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"relationships"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#relationships"],[14,0,"heading-anchor"],[12],[1,"Relationships"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"There\'s no special API for creating relationships using fixtures – you just need to understand how Mirage uses foreign keys to wire up relationships."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s say we had these models:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/user.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": belongsTo("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,")\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Using the ORM we can create two related models:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," chris = schema.users.create({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Chris Garrett\'"],[13],[1," });\\n\\nschema.posts.create({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": chris,\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Coming Soon in Ember Octane\'"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If we take a look at Mirage\'s database after this, we\'ll see this data:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// server.db.dump()"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"users"],[13],[1,": [\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Chris Garrett\'"],[13],[1," }\\n  ],\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"posts"],[13],[1,": [\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"authorId"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Coming Soon in Ember Octane\'"],[13],[1," }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"As you can see, Mirage added an "],[10,"code"],[12],[1,"authorId"],[13],[1," foreign key to the post. The convention for belongsTo foreign keys is"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-string"],[12],[1,"`"],[10,1],[14,0,"hljs-subst"],[12],[1,"${relationshipName}"],[13],[1,"Id`"],[13],[13],[13],[1,"\\n"],[10,2],[12],[1,"In this case, a post gets an "],[10,"code"],[12],[1,"authorId"],[13],[1,", even though that relationship points to a "],[10,"code"],[12],[1,"User"],[13],[1," model. The relationship name is always used rather than the model name, because models can have multiple relationships that point to the same type of model."],[13],[1,"\\n"],[10,2],[12],[1,"Looking at the database dump above, if you wanted to recreate the same relationship graph using only fixture files, your files would look something like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/fixtures/users.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," [\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Chris Garrett\'"],[13],[1," }\\n];\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/fixtures/posts.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," [\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"authorId"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Coming Soon in Ember Octane\'"],[13],[1," }\\n];"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Once these fixtures are loaded into Mirage, all the ORM methods, Shorthands and Serializers would work as expected."],[13],[1,"\\n"],[10,2],[12],[1,"If this happens to be a bi-directional relationship"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefineddiff"],[12],[1,"  // mirage/models/user.js\\n  export default Model.extend({\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+   posts: hasMany()"],[13],[1,"\\n  });\\n\\n  // mirage/models/post.js\\n  export default Model.extend({\\n    author: belongsTo(\'user\')\\n  });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"then Mirage will add an array of foreign keys on the new hasMany association:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/fixtures/users.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," [\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"postIds"],[13],[1,": [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1," ], "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Chris Garrett\'"],[13],[1," }\\n];\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/fixtures/posts.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," [\\n  { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"authorId"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Coming Soon in Ember Octane\'"],[13],[1," }\\n];"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The convention for hasMany relationship foreign keys is"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-string"],[12],[1,"`"],[10,1],[14,0,"hljs-subst"],[12],[1,"${singularize(relationshipName)}"],[13],[1,"Ids`"],[13],[13],[13],[1,"\\n"],[10,2],[12],[1,"All associations have their own keys, because Mirage supports arbitrary one-way relationships. If two associations are inverses of each other, as in the above case, Mirage will keep the keys on each model in sync provided you use the ORM methods."],[13],[1,"\\n"],[10,2],[12],[1,"As you can see, maintaining foreign keys and keeping them in sync across fixture files can get a little messy, which is why Mirage recommends using factories for most of your data creation."],[13],[1,"\\n"],[10,2],[12],[1,"Still, fixtures can be quite useful in certain situations, so they\'re a good tool to have in your toolbox."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/data-layer/fixtures/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/models/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"ZudIPzp9",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"models"],[14,0,"docs-md__h1"],[12],[1,"Models"],[13],[1,"\\n    "],[10,2],[12],[1,"To take advantage of the ORM, Mirage needs to know about your application\'s models and their relationships. This section will teach you how to define and work with your models, and the next will discuss relationships."],[13],[1,"\\n"],[10,2],[12],[10,"strong"],[12],[1,"Note that if your Ember application uses Ember Data, Mirage will automatically discover your models and their relationships"],[13],[1,", so you don’t need to define any files within Mirage yourself."],[13],[1,"\\n"],[10,2],[12],[1,"As a clarifying point, Mirage model instances only exist within Mirage\'s server, and are never shared directly with your Ember app or rendered directly in components. They exist solely to help you manage the data and relationships in your fake backend, but are serialized as a JSON string before they are sent over to your Ember app."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"defining-models"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#defining-models"],[14,0,"heading-anchor"],[12],[1,"Defining models"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To define a model, you can use the generator:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"ember g mirage-model blog-post"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This creates a file under "],[10,"code"],[12],[1,"/mirage/models"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model;"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"creating-models"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#creating-models"],[14,0,"heading-anchor"],[12],[1,"Creating models"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To create models, access the model\'s collection via the "],[10,"code"],[12],[1,"schema"],[13],[1," object, which is available in your route handlers:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/blog-posts\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," attrs = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".normalizedRequestAttrs();\\n\\n  schema.blogPosts.create(attrs);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"or as "],[10,"code"],[12],[1,"server.schema"],[13],[1," directly off of your Mirage server instance:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.schema.blogPosts.create({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Lorem ipsum\'"],[13],[1," });\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note that the collection is the pluralized form of the model\'s model name (the "],[10,"code"],[12],[1,"models/blog-post.js"],[13],[1," definition from above creates a "],[10,"code"],[12],[1,"schema.blogPosts"],[13],[1," collection)."],[13],[1,"\\n"],[10,2],[12],[1,"Outside of route handlers, you\'ll typically create models using Factories via "],[10,"code"],[12],[1,"server.create"],[13],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-post\'"],[13],[1,");\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"which delegates to the collection\'s "],[10,"code"],[12],[1,"create"],[13],[1," method under the hood. We\'ll talk more about creating data using Factories later in these guides."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"accessing-models"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#accessing-models"],[14,0,"heading-anchor"],[12],[1,"Accessing models"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To access your models, use the various query methods from the model\'s collection."],[13],[1,"\\n"],[10,2],[12],[1,"For example, use "],[10,"code"],[12],[1,"all()"],[13],[1," to return all known models:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/blog-posts\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.blogPosts.all();\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Here are some other common query methods:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"schema.blogPosts.find("],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,");\\nschema.blogPosts.first();\\nschema.blogPosts.where({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"isPublished"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1," });\\nschema.blogPosts.findBy({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Introduction\'"],[13],[1," });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Check out the "],[1,[28,[35,0],["Schema API docs","docs.api.item","modules/orm/schema~Schema"],null]],[1," to see all available query methods."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"updating-and-deleting-models"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#updating-and-deleting-models"],[14,0,"heading-anchor"],[12],[1,"Updating and deleting models"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Once you\'re working with an instance of a model, there are other properties and methods you\'ll have access to."],[13],[1,"\\n"],[10,2],[12],[1,"For example, you can update a model:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," post = schema.blogPosts.find("],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,");\\n\\npost.update({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Obi-Wan\'"],[13],[1," });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"or delete one:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," post = schema.blogPosts.find("],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,");\\n\\npost.destroy();"],[13],[13],[1,"\\n"],[10,2],[12],[1,"View the "],[1,[28,[35,0],["Model API docs","docs.api.item","modules/orm/model~Model"],null]],[1," to see all the available fields and methods for model instances."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"Once your Models have been defined, the next step is to define the relationships between them, so you can really start to leverage the power of Mirage\'s ORM."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s talk about how to do that next."],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/data-layer/models/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/orm/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"63NNxRfD",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"why-an-orm-"],[14,0,"docs-md__h1"],[12],[1,"Why an ORM?"],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage originally shipped with just a database as its data layer. While helpful, users still had to write a lot of code to reproduce their modern, complex backends. In particular, dealing with relationships was a big pain point."],[13],[1,"\\n"],[10,2],[12],[1,"The solution was to add an Object Relational Mapper, or ORM, to Mirage."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s see how an ORM allows Mirage to do more of the heavy lifting for you."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"motivation"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#motivation"],[14,0,"heading-anchor"],[12],[1,"Motivation"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Consider a database that looks like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"db.dump();\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Result"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Inception\'"],[13],[1," },\\n    { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dunkirk\'"],[13],[1," }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The first problem you\'ll encounter when writing a route handler is how to transform this raw data into the format your Ember app expects – that is, how to match the format of your production API."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s say your backend uses "],[10,3],[14,6,"https://jsonapi.org/"],[14,0,"docs-md__a"],[12],[1,"the JSON:API spec"],[13],[1,". Your response to a GET request for "],[10,"code"],[12],[1,"/api/movies/1"],[13],[1," should look something like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /api/movies/1"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Not a huge deal – we could just write this formatting logic directly in our route handler:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movie = schema.db.movies.find(request.params.id);\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": movie.id,\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": movie.title\\n      }\\n    }\\n  };\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This works. But let\'s say our "],[10,"code"],[12],[1,"Movie"],[13],[1," model had a few more attributes:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'October 26, 2014\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,"\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now our route handler needs to be more clever, and make sure all properties other than "],[10,"code"],[12],[1,"id"],[13],[1," end up in the "],[10,"code"],[12],[1,"attributes"],[13],[1," hash:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movie = schema.db.movies.find(request.params.id);\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movieJSON = {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": movie.id,\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": { }\\n    }\\n  };\\n  "],[10,1],[14,0,"hljs-built_in"],[12],[1,"Object"],[13],[1,".keys(movie)\\n    .filter("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"key"],[13],[1," =>"],[13],[1," key !=== "],[10,1],[14,0,"hljs-string"],[12],[1,"\'id\'"],[13],[1,")\\n    .forEach("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"key"],[13],[1," =>"],[13],[1," {\\n      movieJSON[key] = movie[key];\\n    });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," movieJSON;\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"As you can see, things get complicated pretty fast."],[13],[1,"\\n"],[10,2],[12],[1,"What if we add relationships to the mix? Let\'s say a "],[10,"code"],[12],[1,"Movie"],[13],[1," has a relationship to a "],[10,"code"],[12],[1,"director"],[13],[1,", and it stores that relationship using a "],[10,"code"],[12],[1,"directorId"],[13],[1," foreign key:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'October 26, 2014\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"directorId"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'23\'"],[13],[1,"\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The expected HTTP response for this model now looks like this"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n    },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"directors"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": { "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'people\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'23\'"],[13],[1," }\\n      }\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"meaning our route handlers need to get even more complex. In particular, they need a robust way to differentiate between a model\'s attributes (like "],[10,"code"],[12],[1,"title"],[13],[1,") and its relationship keys (like "],[10,"code"],[12],[1,"directorId"],[13],[1,")."],[13],[1,"\\n"],[10,2],[12],[1,"These sorts of problems turn out to be common enough that we can solve them generally, provided Mirage is aware of your application\'s models and their relationships."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"problems-solved-by-the-orm"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#problems-solved-by-the-orm"],[14,0,"heading-anchor"],[12],[1,"Problems solved by the ORM"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"When Mirage knows about your application\'s domain, it can shoulder the responsibility for the low-level bookkeeping work needed to properly implement your mock server."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s take a look at some examples of how it does this."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"separation-of-formatting-logic"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#separation-of-formatting-logic"],[14,0,"heading-anchor"],[12],[1,"Separation of formatting logic"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To start, we can tell Mirage about our application\'s schema by defining Mirage models. These models get registered with the ORM and tell Mirage about the shape of your data."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s define a "],[10,"code"],[12],[1,"Movie"],[13],[1," model."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Mirage models are "],[10,"em"],[12],[1,"schemaless in attributes"],[13],[1,", in that they don\'t require you to define plain attributes like "],[10,"code"],[12],[1,"title"],[13],[1," and "],[10,"code"],[12],[1,"releaseDate"],[13],[1,". So, the above model definition works regardless of what attributes your "],[10,"code"],[12],[1,"Movie"],[13],[1," model has."],[13],[1,"\\n"],[10,2],[12],[1,"If you\'re using Ember Data, Mirage\'s ORM will automatically register your Ember Data models for you at run time, so you don\'t have to duplicate your domain information in two places."],[13],[1,"\\n"],[10,2],[12],[1,"With the "],[10,"code"],[12],[1,"Movie"],[13],[1," model defined, we can update our route handler to use the ORM to respond with a Mirage model instance:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," id = request.params.id;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.find(id);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"schema"],[13],[1," argument is how you interact with the ORM."],[13],[1,"\\n"],[10,2],[12],[1,"By returning an instance of a Mirage model from a route handler instead of a plain JavaScript object, we can now take advantage of Mirage\'s Serializer layer. Serializers work by turning Models and Collections into formatted JSON responses."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage ships with a JSONAPISerializer out of the box, so assuming it\'s defined as your Application serializer"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/serializers/application.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { JSONAPISerializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," JSONAPISerializer.extend({\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"this route handler will now respond with the payload we expect:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'October 26, 2014\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,"\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The ORM is already helping us keep our route handlers tidy by delegating the work of transforming our models into JSON to the Serializer layer."],[13],[1,"\\n"],[10,2],[12],[1,"But it gets even more powerful when we add relationships to the mix."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"fetching-related-data"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#fetching-related-data"],[14,0,"heading-anchor"],[12],[1,"Fetching related data"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Let\'s say our "],[10,"code"],[12],[1,"Movie"],[13],[1," has a belongs-to relationship with a "],[10,"code"],[12],[1,"director"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, belongsTo } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"director"],[13],[1,": belongsTo("],[10,1],[14,0,"hljs-string"],[12],[1,"\'person\'"],[13],[1,")\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"director"],[13],[1," is an instance of a "],[10,"code"],[12],[1,"Person"],[13],[1," model:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/person.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Again, if you\'re using Ember Data, both the models and relationships will be automatically generated for you. No need to create this file."],[13],[1,"\\n"],[10,2],[12],[1,"Without changing anything about our route handler or serializer, we can now fetch a graph of data by using JSON:API includes."],[13],[1,"\\n"],[10,2],[12],[1,"The following request"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"GET /api/movies/1?include=director"],[13],[13],[10,2],[12],[1,"will now generate this response:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'October 26, 2014\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,"\\n    },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"director"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": { "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'people\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1," }\\n      }\\n    }\\n  },\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"included"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'people\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Christopher Nolan\'"],[13],[1,"\\n      }\\n    }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The JSONAPISerializer is able to inspect the ORM so that it can put all models, attributes and relationships in the right place. Our route handler doesn\'t need to change at all."],[13],[1,"\\n"],[10,2],[12],[1,"In fact, the route handler we wrote is the same as the default behavior of the Shorthand, meaning we can just switch to using that:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefineddiff"],[12],[10,1],[14,0,"hljs-deletion"],[12],[1,"- this.get(\'/movies/:id\', (schema, request) => {"],[13],[1,"\\n"],[10,1],[14,0,"hljs-deletion"],[12],[1,"-   let id = request.params.id;"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-deletion"],[12],[1,"-   return schema.movies.find(id);"],[13],[1,"\\n"],[10,1],[14,0,"hljs-deletion"],[12],[1,"- });"],[13],[1,"\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+ this.get(\'/movies/:id\');"],[13],[13],[13],[1,"\\n"],[10,2],[12],[1,"This is another example of how the ORM helps various parts of Mirage, like Shorthands and Serializers, work together to simplify your server definition."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"creating-and-editing-related-data"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#creating-and-editing-related-data"],[14,0,"heading-anchor"],[12],[1,"Creating and editing related data"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The ORM also makes creating and editing related data easier than if you only worked with the raw database records."],[13],[1,"\\n"],[10,2],[12],[1,"For instance, to create a "],[10,"code"],[12],[1,"Movie"],[13],[1," and "],[10,"code"],[12],[1,"Person"],[13],[1," with a relationship using only the database, you\'d need to do something like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"server.db.loadData({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"people"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Christopher Nolan\'"],[13],[1,"\\n    }\\n  ],\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'October 26, 2014\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"directorId"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,"\\n    }\\n  ]\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note the "],[10,"code"],[12],[1,"directorId"],[13],[1," foreign key on the "],[10,"code"],[12],[1,"Movies"],[13],[1," record must match the "],[10,"code"],[12],[1,"id"],[13],[1," on the associated "],[10,"code"],[12],[1,"People"],[13],[1," record."],[13],[1,"\\n"],[10,2],[12],[1,"Managing raw database data like this quickly gets unwieldy, especially as relationships change over time."],[13],[1,"\\n"],[10,2],[12],[1,"Using the ORM via "],[10,"code"],[12],[1,"server.schema"],[13],[1,", we can create this graph without managing any IDs:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," nolan = schema.people.create({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Christopher Nolan\'"],[13],[1," });\\n\\nschema.movies.create({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"director"],[13],[1,": nolan,\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"releaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'October 26, 2014\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Passing in the model instance "],[10,"code"],[12],[1,"nolan"],[13],[1," as the "],[10,"code"],[12],[1,"director"],[13],[1," attribute when creating the movie is enough for all the keys to be properly set up."],[13],[1,"\\n"],[10,2],[12],[1,"The ORM also keeps foreign keys in sync as relationships are edited. Given the database"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Star Wars: The Rise of Skywalker\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"directorId"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,"\\n    }\\n  ],\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"people"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Rian Johnson\'"],[13],[1,"\\n    },\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'J.J. Abrams\'"],[13],[1,"\\n    }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"we could update the movie\'s director like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," episode9 = schema.movies.findBy({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Star Wars: The Rise of Skywalker\'"],[13],[1,"\\n});\\n\\nepisode9.update({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"director"],[13],[1,": schema.people.findBy({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'J.J. Abrams\'"],[13],[1," });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The new database would look like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Star Wars: The Rise of Skywalker\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"directorId"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,"\\n    }\\n  ],\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"people"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Rian Johnson\'"],[13],[1,"\\n    },\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'J.J. Abrams\'"],[13],[1,"\\n    }\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note how the "],[10,"code"],[12],[1,"directorId"],[13],[1," was changed in the database, even though we only ever worked with model instances."],[13],[1,"\\n"],[10,2],[12],[1,"Importantly, this also holds true for more complex relationships, like one-to-many or many-to-many relationships that have an inverse."],[13],[1,"\\n"],[10,2],[12],[1,"The ORM allows Mirage to abstract all this bookkeeping away from your code, and even gives Shorthands enough power to respect arbitrary updates to complex relationship graphs."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"These are some of the main problems addressed by Mirage\'s ORM. Generally, when Mirage knows about your application\'s schema, it can take on more of the responsibility of configuring your mock server."],[13],[1,"\\n"],[10,2],[12],[1,"Next, we\'ll take a look at how to actually define your models and their relationships in Mirage."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/data-layer/orm/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/relationships/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"wFtvILM8",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"relationships"],[14,0,"docs-md__h1"],[12],[1,"Relationships"],[13],[1,"\\n    "],[10,2],[12],[1,"Once you\'ve defined your models, you can define relationships between them using the "],[10,"code"],[12],[1,"belongsTo"],[13],[1," and "],[10,"code"],[12],[1,"hasMany"],[13],[1," helpers. Each helper adds some dynamic methods to your model."],[13],[1,"\\n"],[10,2],[12],[1,"Just as another reminder, if you use Ember Data and have models and relationships defined there, you don\'t need to define any relationships within your Mirage folder, as those will be automatically discovered and set up for you."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"belongsto"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#belongsto"],[14,0,"heading-anchor"],[12],[1,"belongsTo"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To define a to-one relationship, import the "],[10,"code"],[12],[1,"belongsTo"],[13],[1," helper and define a new property on a model that points to another model:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, belongsTo } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": belongsTo()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This defines a "],[10,"code"],[12],[1,"belongsTo"],[13],[1," relationship to an "],[10,"code"],[12],[1,"Author"],[13],[1," model."],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"belongsTo"],[13],[1," helper adds several new properties and methods to your models."],[13],[1,"\\n"],[10,2],[12],[1,"In this case, our "],[10,"code"],[12],[1,"blog-post"],[13],[1," model would now have an "],[10,"code"],[12],[1,"authorId"],[13],[1," property, as well as some methods for working with the associated "],[10,"code"],[12],[1,"author"],[13],[1," model:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"blogPost.authorId; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// 1"],[13],[1,"\\nblogPost.authorId = "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,"; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// updates the relationship"],[13],[1,"\\nblogPost.author; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Author instance"],[13],[1,"\\nblogPost.author = anotherAuthor;\\nblogPost.newAuthor(attrs); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// new unsaved author"],[13],[1,"\\nblogPost.createAuthor(attrs); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// new saved author (updates blogPost.authorId in memory only)"],[13],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note that when a child calls "],[10,"code"],[12],[1,"child.createParent"],[13],[1,", the new parent is immediately saved to the "],[10,"code"],[12],[1,"db"],[13],[1,", but the child\'s foreign key is updated "],[10,"em"],[12],[1,"on this instance only"],[13],[1,", and is not immediately persisted to the database."],[13],[1,"\\n"],[10,2],[12],[1,"In other words, "],[10,"code"],[12],[1,"blogPost.createAuthor"],[13],[1," will create a new "],[10,"code"],[12],[1,"author"],[13],[1," record, insert it into the "],[10,"code"],[12],[1,"db"],[13],[1,", and update the "],[10,"code"],[12],[1,"blogPost.authorId"],[13],[1," in memory, but if you were to fetch the "],[10,"code"],[12],[1,"blogPost"],[13],[1," from the "],[10,"code"],[12],[1,"db"],[13],[1," again, the relationship would not be persisted."],[13],[1,"\\n"],[10,2],[12],[1,"To persist the new foreign key, you would call "],[10,"code"],[12],[1,"blogPost.save()"],[13],[1," after creating the new author."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"hasmany"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#hasmany"],[14,0,"heading-anchor"],[12],[1,"hasMany"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To define a to-many relationship, use the "],[10,"code"],[12],[1,"hasMany"],[13],[1," helper:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, hasMany } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"comments"],[13],[1,": hasMany()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This helper adds a "],[10,"code"],[12],[1,"commentIds"],[13],[1," property to the "],[10,"code"],[12],[1,"blogPost"],[13],[1," model, as well as some methods for working with the associated "],[10,"code"],[12],[1,"comments"],[13],[1," collection:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"blogPost.commentIds; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// [1, 2, 3]"],[13],[1,"\\nblogPost.commentIds = ["],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,"]; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// updates the relationship"],[13],[1,"\\nblogPost.comments; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// array of related comments"],[13],[1,"\\nblogPost.comments = [comment1, comment2]; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// updates the relationship"],[13],[1,"\\nblogPost.newComment(attrs); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// new unsaved comment"],[13],[1,"\\nblogPost.createComment(attrs); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// new saved comment (comment.blogPostId is set)"],[13],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"association-options"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#association-options"],[14,0,"heading-anchor"],[12],[1,"Association options"],[13],[13],[1,"\\n    \\n      "],[10,"h3"],[14,1,"modelname"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#modelname"],[14,0,"heading-anchor"],[12],[1,"modelName"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"If your associations model has a different name than the association itself, you can specify the "],[10,"code"],[12],[1,"modelName"],[13],[1," on the association."],[13],[1,"\\n"],[10,2],[12],[1,"For example,"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, belongsTo, hasMany } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": belongsTo("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"user\\""],[13],[1,"),\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"comments"],[13],[1,": hasMany("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"annotation\\""],[13],[1,")\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"would add all the named "],[10,"code"],[12],[1,"author"],[13],[1," and "],[10,"code"],[12],[1,"comment"],[13],[1," methods as listed above, but use "],[10,"code"],[12],[1,"user"],[13],[1," and "],[10,"code"],[12],[1,"annotation"],[13],[1," models for the actual relationships."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"inverse"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#inverse"],[14,0,"heading-anchor"],[12],[1,"inverse"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Often, relationships can be inverses of each other."],[13],[1,"\\n"],[10,2],[12],[1,"For example, say we had the following two models:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"comments"],[13],[1,": hasMany()\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// comment.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"blogPost"],[13],[1,": belongsTo()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"In this case, "],[10,"code"],[12],[1,"blogPost.comments"],[13],[1," would point to a collection of Comment models, and each one of those Comment models would have a "],[10,"code"],[12],[1,"comment.blogPost"],[13],[1," relationship that pointed back to the original post."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage will often be able to infer that two relationships on two different models are inverses of each other, but sometimes you\'ll need to be explicit. This typically happens if a model has two relationships that point to the same model type."],[13],[1,"\\n"],[10,2],[12],[1,"For example, suppose we had the following schema:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// user.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"blogPosts"],[13],[1,": hasMany()\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": belongsTo("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"user\\""],[13],[1,"),\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"reviewer"],[13],[1,": belongsTo("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"user\\""],[13],[1,")\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"In this case, Mirage doesn\'t know which relationship ("],[10,"code"],[12],[1,"blogPost.author"],[13],[1," or "],[10,"code"],[12],[1,"blogPost.reviewer"],[13],[1,") should by synchronized with the parent\'s "],[10,"code"],[12],[1,"user.blogPosts"],[13],[1," collection. So, you can specify which one by using the "],[10,"code"],[12],[1,"inverse"],[13],[1," option:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// user.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"blogPosts"],[13],[1,": hasMany()\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": belongsTo("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"user\\""],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"inverse"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"blogPosts\\""],[13],[1," }),\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"reviewer"],[13],[1,": belongsTo("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"user\\""],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"inverse"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"null"],[13],[1," })\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now, if a blog post is added to "],[10,"code"],[12],[1,"user.blogPosts"],[13],[1,", that post\'s "],[10,"code"],[12],[1,"author"],[13],[1," will be correctly set."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"polymorphic"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#polymorphic"],[14,0,"heading-anchor"],[12],[1,"polymorphic"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"You can specify whether an association is a polymorphic association by passing "],[10,"code"],[12],[1,"{ polymorphic: true }"],[13],[1," as an option."],[13],[1,"\\n"],[10,2],[12],[1,"For example, say you have a "],[10,"code"],[12],[1,"Comment"],[13],[1," that can belong to a "],[10,"code"],[12],[1,"BlogPost"],[13],[1," or a "],[10,"code"],[12],[1,"Picture"],[13],[1,". Here\'s how the model definitions would look:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// app/models/comment.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"commentable"],[13],[1,": belongsTo({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"polymorphic"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1," })\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// app/models/blog-post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"comments"],[13],[1,": hasMany()\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// app/models/picture.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"comments"],[13],[1,": hasMany()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note that "],[10,"code"],[12],[1,"commentable"],[13],[1," doesn\'t need a type (there\'s no validation done on which types of models can exist on that association)."],[13],[1,"\\n"],[10,2],[12],[1,"Polymorphic associations have slightly different method signatures for their foreign keys and build/create methods."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," comment = schema.comments.create({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"text"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"foo\\""],[13],[1," });\\n\\ncomment.buildCommentable("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"post\\""],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Lorem Ipsum\\""],[13],[1," });\\ncomment.createCommentable("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"post\\""],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Lorem Ipsum\\""],[13],[1," });\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// getter"],[13],[1,"\\ncomment.commentableId; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// { id: 1, type: \'blog-post\' }"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// setter"],[13],[1,"\\ncomment.commentableId = { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"picture\\""],[13],[1," };"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Has-many asssociations can also be polymorphic:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// app/models/user.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"things"],[13],[1,": hasMany({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"polymorphic"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1," })\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// app/models/car.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// app/models/watch.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," user = schema.users.create({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Sam\\""],[13],[1," });\\n\\nuser.buildThing("],[10,1],[14,0,"hljs-string"],[12],[1,"\'car\'"],[13],[1,", { attrs });\\nuser.createThing("],[10,1],[14,0,"hljs-string"],[12],[1,"\'watch\'"],[13],[1,", { attrs });\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// getter"],[13],[1,"\\nuser.thingIds; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// [ { id: 1, type: \'car\' }, { id: 3, type: \'watch\' }, ... ]"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// setter"],[13],[1,"\\nuser.thingIds = [ { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'watch\'"],[13],[1," }, ... ];"],[13],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"Be sure to check out the "],[1,[28,[35,0],["Schema","docs.api.item","modules/orm/schema~Schema"],null]],[1,", "],[1,[28,[35,0],["Model","docs.api.item","modules/orm/model~Model"],null]],[1," and "],[1,[28,[35,0],["Collection","docs.api.item","modules/orm/collection~Collection"],null]],[1," API docs to learn about all the available ORM methods."],[13],[1,"\\n"],[10,2],[12],[1,"We\'ll also cover Serializers in these guides, where you\'ll learn how to customize the serialized forms of your models and collections to match your production API."],[13],[1,"\\n"],[10,2],[12],[1,"Next, let\'s take a look at Factories, which leverage your new Model and Relationship definitions to make it easy to create graphs of relational data."],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/data-layer/relationships/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/serializers/ember-data-serializer/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"qKhiKQXw",block:'[[[10,0],[14,0,"docs-md"],[12],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"EmberDataSerializer"],[13],[1," extends the "],[10,"code"],[12],[1,"RestSerializer"],[13],[1," with the added functionality of"],[10,"code"],[12],[1,"primaryKey"],[13],[1," and "],[10,"code"],[12],[1,"attrs"],[13],[1," \\n(renamed "],[10,"code"],[12],[1,"transforms"],[13],[1," as "],[10,"code"],[12],[1,"attrs"],[13],[1," was already in use by Mirage) properties. \\nThese properties work the same as the properties provided."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"primary-key"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#primary-key"],[14,0,"heading-anchor"],[12],[1,"Primary Key"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"This serializer provides for a property "],[10,"code"],[12],[1,"primaryKey"],[13],[1," that works the same as the "],[10,"code"],[12],[1,"primaryKey"],[13],[1," property on an ember data serializer. \\nBy default this property will be "],[10,"code"],[12],[1,"id"],[13],[1," but if you assign a different value, that value will be used in the JSON instead of "],[10,"code"],[12],[1,"id"],[13],[1,". \\nThis means that if you are using the "],[10,"code"],[12],[1,"primaryKey"],[13],[1," property on your ember data serializer, using the same property on the mirage serializer \\nwill perform the same function.\\nIf you were using the "],[10,"code"],[12],[1,"RestSerializer"],[13],[1," you would need to override the "],[10,"code"],[12],[1,"serialize"],[13],[1," and "],[10,"code"],[12],[1,"normalize"],[13],[1," functions to do the transform yourself. "],[13],[1,"\\n"],[10,2],[12],[1,"Using "],[10,"code"],[12],[1,"EmberDataSerializer"],[13],[1," you can let the serializer perform this transformation for you. To be clear, when data is received by Mirage, this will take the \\nvalue of "],[10,"code"],[12],[1,"addressId"],[13],[1," from the JSON and use it as the "],[10,"code"],[12],[1,"id"],[13],[1," for the Mirage model. When Mirage serializers it\'s model into JSON, it will \\nuse the value for the "],[10,"code"],[12],[1,"id"],[13],[1," property and assign it to the property "],[10,"code"],[12],[1,"addressId"],[13],[1,"."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," EmberDateSerialzier "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage/ember-data-serializer\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," EmberDateSerialzier.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"primaryKey"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"addressId\\""],[13],[1,"\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"transforms"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#transforms"],[14,0,"heading-anchor"],[12],[1,"Transforms"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Transforms provides the same function as "],[10,"code"],[12],[1,"attrs"],[13],[1," for the ember data serializers however this transformation is happening\\non the server side for Mirage. This allows your mirage models to look more like your actual server models."],[13],[1,"\\n"],[10,2],[12],[1,"Example of a Mirage serializer extending from EmberDataSerializer"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { EmberDataSerializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," EmberDataSerializer.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"transforms"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"externalName\\""],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"address"],[13],[1,": {"],[10,1],[14,0,"hljs-attr"],[12],[1,"key"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"addressId\\""],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"serialize"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ids\\""],[13],[1,"},\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"age"],[13],[1,": {"],[10,1],[14,0,"hljs-attr"],[12],[1,"key"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"externalAge\\""],[13],[1,"},\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"blogPosts"],[13],[1,": {"],[10,1],[14,0,"hljs-attr"],[12],[1,"key"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"blogPostIds\\""],[13],[1,"}\\n  }\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If you would like Mirage to apply the transforms from your ember data serializers for you see \\n"],[1,[28,[35,0],["Advanced Configuration of Serializers","docs.advanced.server-configuration"],null]],[1,"."],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/data-layer/serializers/ember-data-serializer/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/data-layer/serializers/index/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"wzhuWLJm",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"serializers"],[14,0,"docs-md__h1"],[12],[1,"Serializers"],[13],[1,"\\n    "],[10,2],[12],[1,"A serializer is an object responsible for transforming a Model or Collection that\'s returned from your route handlers"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.find(request.params.id);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"into a formatted JSON payload"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /movies/1"],[13],[1,"\\n\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,";,\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"suitable for consumption by your Ember app."],[13],[1,"\\n"],[10,2],[12],[1,"Serializers are the last main part of Mirage\'s architecture that interacts with the Data Layer, because producing a well-formatted JSON response often involves traversing the relationship graph of your models."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s see how they work."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"choosing-which-serializer-to-use"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#choosing-which-serializer-to-use"],[14,0,"heading-anchor"],[12],[1,"Choosing which serializer to use"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The first step in working with Mirage\'s serializers is to choose which included serializer to start with, which in turn depends on what JSON format your backend uses to serve data to your Ember app."],[13],[1,"\\n"],[10,2],[12],[1,"The JSON payload above is an example of an API that follows "],[10,3],[14,6,"https://jsonapi.org/"],[14,0,"docs-md__a"],[12],[1,"the JSON:API spec"],[13],[1,". You\'ll see it used a lot in the Ember ecosystem, because it\'s the default API format expected by Ember Data. It also solves a lot of problems that exist in other formats that are less well-defined."],[13],[1,"\\n"],[10,2],[12],[1,"If you are starting a new app, it\'s recommended that you choose a JSON:API implementation for your backend, as that format will give you the smoothest experience with the rest of the Ember ecosystem. However, plenty of Ember apps are built that don\'t use JSON:API."],[13],[1,"\\n"],[10,2],[12],[1,"If your app does use JSON:API, Mirage ships with a "],[10,"code"],[12],[1,"JSONAPISerializer"],[13],[1," that will do the heavy lifting for you."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage also ships with two other named serializers, "],[10,"code"],[12],[1,"ActiveModelSerializer"],[13],[1," and "],[10,"code"],[12],[1,"RestSerializer"],[13],[1,", that match two other popular backend formats. "],[10,"code"],[12],[1,"EmberDataSerializer"],[13],[1," is also provided as a variation to the "],[10,"code"],[12],[1,"RestSerializer"],[13],[1," that uses the "],[10,"code"],[12],[1,"primaryKey"],[13],[1," and "],[10,"code"],[12],[1,"attrs"],[13],[1," defined in your applications ember data serializers, similar to how models are auto discovered. See the section on "],[1,[28,[35,0],["Ember Data Serializer","docs.data-layer.serializers.ember-data-serializer"],null]],[1," for more information."],[13],[1,"\\n"],[10,2],[12],[1,"If your backend uses a different format, you\'ll need to choose the closest one and customize it to match your production format. We\'ll talk about that later in this guide."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"defining-serializers"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#defining-serializers"],[14,0,"heading-anchor"],[12],[1,"Defining serializers"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Once you\'ve selected the appropriate serializer, define your default application-wide serializer by exporting it from "],[10,"code"],[12],[1,"/mirage/serializers/application.js"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/serializers/application.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { JSONAPISerializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," JSONAPISerializer.extend({\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This specifies the serializer to use for each Model and Collection in your system."],[13],[1,"\\n"],[10,2],[12],[1,"If you need to customize a serializer for a particular model type, you can define model-specific serializers that take precedence over your application serializer."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s use Mirage\'s generator to create a "],[10,"code"],[12],[1,"Movie"],[13],[1," serializer:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"ember g mirage-serializer movie"],[13],[13],[10,2],[12],[1,"This creates the file"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," ApplicationSerializer "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./application\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," ApplicationSerializer.extend({\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"which follows the best practice of model-specific serializers extending from your Application serializer."],[13],[1,"\\n"],[10,2],[12],[1,"You can now customize the behavior of how "],[10,"code"],[12],[1,"Movie"],[13],[1," models and collections are serialized into JSON."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"customizing-serializers"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#customizing-serializers"],[14,0,"heading-anchor"],[12],[1,"Customizing serializers"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"When it comes to customizing your application\'s serializers, you\'ll mostly be tweaking Mirage\'s defaults."],[13],[1,"\\n"],[10,2],[12],[1,"For example, if your Ember app expects attribute names to be PascalCase"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /movies/1"],[13],[1,"\\n\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"Id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"ReleaseDate"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"you might override the Serializer\'s "],[10,"code"],[12],[1,"keyForAttribute"],[13],[1," method:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Serializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { classify } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'@ember/string\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Serializer.extend({\\n\\n  keyForAttribute(attr) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," classify(attr);\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"See the API docs for each serializer to learn more about all the customization hooks available."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"relationships"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#relationships"],[14,0,"heading-anchor"],[12],[1,"Relationships"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Relationships are another important aspect of Serializers, as backends have many different ways of dealing with relationships."],[13],[1,"\\n"],[10,2],[12],[1,"For example, the "],[10,"code"],[12],[1,"JSONAPISerializer"],[13],[1," respects query param includes"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"GET /movies/1?include=cast-members"],[13],[13],[10,2],[12],[1,"out of the box. But sometimes Ember apps expect a resource payload to have all their relationship IDs defined, regardless if the request used query param includes."],[13],[1,"\\n"],[10,2],[12],[1,"There\'s an option on "],[10,"code"],[12],[1,"JSONAPISerializer"],[13],[1," that enables this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { JSONAPISerializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," JSONAPISerializer.extend({\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"alwaysIncludeLinkageData"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,"\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now, a GET request to "],[10,"code"],[12],[1,"/movies/1"],[13],[1," would respond with this payload:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,";,\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n    },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'cast-members\'"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": [\\n          { "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'people\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1," },\\n          { "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'people\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'2\'"],[13],[1," },\\n          { "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'people\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'3\'"],[13],[1," },\\n        ]\\n      }\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The Ember app could now use these ids to subsequently fetch the related cast members."],[13],[1,"\\n"],[10,2],[12],[1,"Other times, an Ember app expects to get a link to fetch related data. The "],[10,"code"],[12],[1,"JSONAPISerializer"],[13],[1," also has a hook for this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/serializers/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," ApplicationSerializer "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'./application\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," ApplicationSerializer.extend({\\n\\n  links(movie) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," {\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'cast-members\'"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"related"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"`/api/movies/"],[10,1],[14,0,"hljs-subst"],[12],[1,"${movie.id}"],[13],[1,"/cast-members`"],[13],[1,"\\n      }\\n    };\\n  }\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now a GET request to "],[10,"code"],[12],[1,"/movies/1"],[13],[1," would respond with this payload:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,";,\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n    },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'cast-members\'"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"links"],[13],[1,": {\\n          "],[10,1],[14,0,"hljs-attr"],[12],[1,"related"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"`/api/movies/1/cast-members`"],[13],[1,"\\n        }\\n      }\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The other serializers also have mechanisms controlling how related data can be loaded. Be sure to check out the API docs for all the details."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"working-with-serialized-json"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#working-with-serialized-json"],[14,0,"heading-anchor"],[12],[1,"Working with serialized JSON"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"While most route handlers should return a Model or Collection instance, and leave the serialization logic up to the Serializer, sometimes it can be convenient to perform some final serialization logic directly in your route handler."],[13],[1,"\\n"],[10,2],[12],[1,"You can use the "],[10,"code"],[12],[1,"this.serialize"],[13],[1," helper method to do this - make sure to use a "],[10,"code"],[12],[1,"function"],[13],[1," instead of a fat arrow so you have access to the correct "],[10,"code"],[12],[1,"this"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movies = schema.movies.all();\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," json = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".serialize(movies);\\n\\n  json.meta.size = movies.length;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," json;\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"serialize"],[13],[1," helper will use the typical lookup logic to first check for a model-specific serializer, and then fall back to the default Application serializer."],[13],[1,"\\n"],[10,2],[12],[1,"You can also use a specific serializer if you have a special case by passing in the name of the serialize as a second argument:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movies = schema.movies.all();\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," json = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".serialize(movies, "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie-with-relationship\'"],[13],[1,");\\n\\n  json.meta.size = movies.length;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," json;\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This route handler would use the "],[10,"code"],[12],[1,"mirage/serializers/movie-with-relationship.js"],[13],[1," serializer to transform the collection of movies into a "],[10,"code"],[12],[1,"json"],[13],[1," payload, which is then modified and then finally returned from the route handler."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"In general, you should not need to write much code dealing with Mirage serializers. Even if your backend doesn\'t adhere to one of the predefined formats, you should be able to use the provided hooks to implement an ApplicationSerializer that works for the majority of your models."],[13],[1,"\\n"],[10,2],[12],[1,"The more conventional your backend API is, the less code you\'ll need to write – not only in Mirage, but also in other parts of your Ember application!"],[13],[1,"\\n"],[10,2],[12],[1,"Be sure to check out the "],[1,[28,[35,0],["Serializer","docs.api.item","modules/serializer~Serializer#keyForAttribute"],null]],[1," and "],[1,[28,[35,0],["JSONAPISerializer","docs.api.item","modules/serializers/json-api-serializer~JSONAPISerializer"],null]],[1," docs to learn about all the hooks available to customize your serializer layer."],[13],[1,"\\n"],[10,2],[12],[1,"Now that we\'ve covered the ins and outs of Mirage\'s data layer, we\'re ready to see how we can use Mirage to effectively test our Ember application."],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/data-layer/serializers/index/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/getting-started/installation/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"pc0m7tFF",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"installation"],[14,0,"docs-md__h1"],[12],[1,"Installation"],[13],[1,"\\n    "],[10,2],[12],[1,"To install Mirage, run"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"ember install ember-cli-mirage"],[13],[13],[10,2],[12],[1,"Ember should install the addon and add a "],[10,"code"],[12],[1,"/mirage"],[13],[1," directory to the root of your project."],[13],[1,"\\n"],[10,2],[12],[1,"Check out the "],[1,[28,[35,0],["upgrade guide","docs.getting-started.upgrade-guide"],null]],[1," if you\'re coming from a previous version of Mirage."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"note-for-prettier-users"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#note-for-prettier-users"],[14,0,"heading-anchor"],[12],[1,"Note for Prettier users"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"There\'s an Ember CLI bug that exposes itself when using Prettier + Mirage. A longer-term fix is in the works, but for now, if you\'re using Prettier and install Mirage, you can either"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,2],[12],[1,"pin "],[10,"code"],[12],[1,"eslint-plugin-prettier"],[13],[1," to 2.6.0, or"],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[1,"add the following to "],[10,"code"],[12],[1,".eslintignore"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"/mirage/mirage"],[13],[13],[1,"\\n"],[13],[1,"\\n"],[13],[1,"\\n      \\n      "],[10,"h2"],[14,1,"note-for-fastboot-users"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#note-for-fastboot-users"],[14,0,"heading-anchor"],[12],[1,"Note for FastBoot users"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"You might expect Mirage to serve network requests made by your FastBoot app, but because Mirage runs only in the browser, it currently disables itself if your app is being served by FastBoot."],[13],[1,"\\n"],[10,2],[12],[10,3],[14,6,"https://github.com/miragejs/ember-cli-mirage/issues/1411"],[14,0,"docs-md__a"],[12],[1,"FastBoot support"],[13],[1," is a highly requested feature we are working on. In the meantime, you\'ll need to develop your FastBoot pages against a local server."],[13],[1,"\\n"],[10,2],[12],[1,"You can always bypass FastBoot page generation locally by running"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"FASTBOOT_DISABLED=true ember serve"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Mirage will then run in the browser as expected, and you can develop your client app as normal."],[13],[13]],[],false,["docs-link"]]',moduleName:"dummy/pods/docs/getting-started/installation/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/getting-started/overview/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"Zsf8q1v3",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"overview"],[14,0,"docs-md__h1"],[12],[1,"Overview"],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage lets you simulate API responses by writing "],[10,"strong"],[12],[1,"route handlers"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"The simplest example of a route handler is a function that returns an object:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".namespace = "],[10,1],[14,0,"hljs-string"],[12],[1,"\'api\'"],[13],[1,";\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", () => {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": [\\n        { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1," } },\\n        { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Inception\'"],[13],[1," } },\\n        { "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dunkirk\'"],[13],[1," } },\\n      ]\\n    };\\n  });\\n\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now whenever your Ember app makes a GET request to "],[10,"code"],[12],[1,"/api/movies"],[13],[1,", Mirage will respond with this data."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"dynamic-data"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#dynamic-data"],[14,0,"heading-anchor"],[12],[1,"Dynamic data"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"This works, and is a common way to simulate HTTP responses - but hard-coded responses like this have a few problems:"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,"em"],[12],[1,"They\'re inflexible"],[13],[1,". What if you want to change the data for this route in your tests?"],[13],[1,"\\n"],[10,"li"],[12],[10,"em"],[12],[1,"They contain formatting logic"],[13],[1,". Logic that\'s concerned with the shape of your JSON payload (e.g. the "],[10,"code"],[12],[1,"data"],[13],[1," and "],[10,"code"],[12],[1,"attributes"],[13],[1," keys) is now duplicated across all your route handlers."],[13],[1,"\\n"],[10,"li"],[12],[10,"em"],[12],[1,"They\'re too basic."],[13],[1," Inevitably, when your Mirage server needs to deal with more complex things like relationships, these simple ad hoc responses start to break down."],[13],[1,"\\n"],[13],[1,"\\n      "],[10,2],[12],[1,"Mirage provides a "],[10,"strong"],[12],[1,"data layer"],[13],[1," that lets you write more powerful server implementations. Let\'s see how it works by replacing our basic stub data above."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"creating-a-model"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#creating-a-model"],[14,0,"heading-anchor"],[12],[1,"Creating a model"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"First, we\'ll need to tell Mirage that we have a dynamic "],[10,"code"],[12],[1,"Movie"],[13],[1," model."],[13],[1,"\\n"],[10,2],[12],[1,"If you\'re using Ember Data and you already have a "],[10,"code"],[12],[1,"Movie"],[13],[1," model defined, you can skip this step! Mirage will automatically generate its models from your Ember Data definitions, so you won\'t have any files in the "],[10,"code"],[12],[1,"mirage/models"],[13],[1," directory."],[13],[1,"\\n"],[10,2],[12],[1,"If you\'re not using Ember Data, you can use the "],[10,"code"],[12],[1,"mirage-model"],[13],[1," generator to create a model from the command line:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedbash"],[12],[1,"$ ember g mirage-model movie"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This generates the following file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"writing-a-dynamic-route-handler"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#writing-a-dynamic-route-handler"],[14,0,"heading-anchor"],[12],[1,"Writing a dynamic route handler"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Models let our route handlers take advantage of Mirage\'s "],[10,"em"],[12],[1,"in-memory database"],[13],[1,". The database makes our route handlers dynamic, so we can change the data that\'s returned without having to rewrite the handler."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s update our route handler to be dynamic:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.all();\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"schema"],[13],[1," argument lets us access our new "],[10,"code"],[12],[1,"Movie"],[13],[1," model. This route will now respond with all the authors in Mirage\'s database at the time of the request. We can therefore change the data this route responds with by only changing what records are in Mirage\'s database, instead of having to write a different version of the handler for each scenario we want to simulate."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"seeding-the-database"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#seeding-the-database"],[14,0,"heading-anchor"],[12],[1,"Seeding the database"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Right now, if we sent a request to our new handler above, the response would look something like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /api/movies"],[13],[1,"\\n"],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": [\\n]"],[13],[13],[1,"\\n"],[10,2],[12],[1,"That\'s because Mirage\'s database is empty."],[13],[1,"\\n"],[10,2],[12],[1,"To actually seed our database with fake data, we\'ll use "],[10,"em"],[12],[1,"factories"],[13],[1,". Factories are objects that make it easy to generate realistic-looking data for your Mirage server. Think of them as blueprints for your models."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s create a factory for our author with"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[10,1],[14,0,"hljs-meta"],[12],[1,"$"],[13],[1," ember g mirage-factory movie"],[13],[13],[1,"\\n"],[10,2],[12],[1,"We can then define some properties on our Factory. They can be simple types like Booleans, Strings or Numbers, or functions that return dynamic data:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Factory } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n\\n  title(i) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"`Movie "],[10,1],[14,0,"hljs-subst"],[12],[1,"${i}"],[13],[1,"`"],[13],[1,"; "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Movie 1, Movie 2, etc."],[13],[1,"\\n  },\\n\\n  year() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," min = "],[10,1],[14,0,"hljs-number"],[12],[1,"1950"],[13],[1,";\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," max = "],[10,1],[14,0,"hljs-number"],[12],[1,"2019"],[13],[1,";\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," "],[10,1],[14,0,"hljs-built_in"],[12],[1,"Math"],[13],[1,".floor("],[10,1],[14,0,"hljs-built_in"],[12],[1,"Math"],[13],[1,".random() * (max - min + "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,")) + min;\\n  },\\n\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"rating"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"PG-13\\""],[13],[1,"\\n\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This factory creates objects like"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"[\\n  {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"year"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1992"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"rating"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"PG-13\\""],[13],[1,"\\n  },\\n  {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Movie 2\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"year"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2008"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"rating"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"PG-13\\""],[13],[1,"\\n  },\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ..."],[13],[1,"\\n]"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and so on, which will automatically be inserted into the "],[10,"code"],[12],[1,"movies"],[13],[1," database table. The database will assign each record an "],[10,"code"],[12],[1,"id"],[13],[1,", and now we can interact with this data in our route handlers."],[13],[1,"\\n"],[10,2],[12],[1,"To actually use our new factory definition, we can call the "],[10,"code"],[12],[1,"server.create"],[13],[1," and "],[10,"code"],[12],[1,"server.createList"],[13],[1," methods."],[13],[1,"\\n"],[10,2],[12],[1,"To seed our development database, use the function in the "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/scenarios/default.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n\\n  server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,");\\n\\n};"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now when our Ember app makes a GET request to "],[10,"code"],[12],[1,"/api/movies"],[13],[1," using the route handler above, we\'ll see something that looks like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /api/movies"],[13],[1,"\\n"],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": [\\n  {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"movies\\""],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Movie 1\\""],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"year"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1992"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"rating"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"PG-13\\""],[13],[1,"\\n    }\\n  },\\n  {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"movies\\""],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Movie 2\\""],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"year"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"2008"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"rating"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"PG-13\\""],[13],[1,"\\n    }\\n  },\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ..."],[13],[1,"\\n]"],[13],[13],[1,"\\n"],[10,2],[12],[1,"As we can see, this response is now influenced by the run-time state of our database."],[13],[1,"\\n"],[10,2],[12],[1,"In acceptance tests, "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," is ignored, and instead you can use "],[10,"code"],[12],[1,"this.server"],[13],[1," to setup your database in the state needed for the test:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// tests/acceptance/movies-test.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupApplicationTest } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupMirage } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage/test-support\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Acceptance | Homepage test\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"hooks"],[13],[1,") "],[13],[1,"{\\n  setupApplicationTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"I can view the movies\\""],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"movie\\""],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"/home\\""],[13],[1,");\\n\\n    assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"[data-test-id=\'movie-row\']\\""],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"count"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1," });\\n  });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"You can also pass attribute overrides directly to "],[10,"code"],[12],[1,"create"],[13],[1," or "],[10,"code"],[12],[1,"createList"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"I can view the movie title\\""],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movie = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Interstellar\\""],[13],[1," });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"`/movies/"],[10,1],[14,0,"hljs-subst"],[12],[1,"${movie.id}"],[13],[1,"`"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'h1\'"],[13],[1,").includesText("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Interstellar\\""],[13],[1,");\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"You now have a simple way to set up your Mirage server\'s initial data, both during development and on a per-test basis."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"associations"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#associations"],[14,0,"heading-anchor"],[12],[1,"Associations"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Dealing with associations is always tricky, and faking endpoints that deal with associations is no exception. Fortunately, Mirage ships with an ORM to help keep your route handlers clean."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s say your movie has many cast-members. You can declare this relationship in your model:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, hasMany } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"castMembers"],[13],[1,": hasMany()\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/cast-member.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, belongsTo } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movie"],[13],[1,": belongsTo()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now Mirage knows about the relationship between these two models, which can be useful when writing route handlers:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id/cast-members\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movie = schema.movies.find(request.params.id);\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," movie.castMembers;\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and when creating graphs of related data:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"I can see a movie\'s cast members\\""],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"castMembers"],[13],[1,": [\\n      server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'cast-member\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Matthew McConaughey\'"],[13],[1," }),\\n      server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'cast-member\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Anne Hathaway\'"],[13],[1," }),\\n      server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'cast-member\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Jessica Chastain\'"],[13],[1," })\\n    ]\\n  });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'li.cast-member\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"count"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1," });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Mirage uses foreign keys to keep track of these related models for you, so you don\'t have to worry about any messy bookkeeping details while your Ember app reads and writes new relationships to Mirage\'s database."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"serializers"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#serializers"],[14,0,"heading-anchor"],[12],[1,"Serializers"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage is designed for you to be able to completely replicate your production server."],[13],[1,"\\n"],[10,2],[12],[1,"So far, we\'ve seen that Mirage\'s default payloads are formatted using the "],[10,3],[14,6,"https://jsonapi.org"],[14,0,"docs-md__a"],[12],[1,"JSON:API"],[13],[1," spec. This spec produces payloads that look like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /movies/1"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movies\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"New Ember apps using Ember Data work well with the JSON:API format, but of course, not every backend uses JSON:API."],[13],[1,"\\n"],[10,2],[12],[1,"For example, your API responses might look more like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /movies/1"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movies"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This is why Mirage "],[10,"em"],[12],[1,"serializers"],[13],[1," exist. Serializers let you customize the formatting logic of your responses, without having to change your route handlers, models, relationships, or any other part of your Mirage setup."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage ships with a few named serializers that match popular backend formats. You can also extend from the base class and use formatting hooks to match your own backend:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/serializers/application.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Serializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Serializer.extend({\\n  keyForAttribute(attr) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," dasherize(attr);\\n  },\\n\\n  keyForRelationship(attr) {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," dasherize(attr);\\n  }\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Mirage\'s serializer layer is also aware of your relationships, which helps when faking endpoints that sideload or embed related data:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/serializers/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Serializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Serializer.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"include"],[13],[1,": [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'crewMembers\'"],[13],[1," ]\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,", (schema, request) => {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.find(request.params.id);\\n  });\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"With the above config, a GET to "],[10,"code"],[12],[1,"/movies/1"],[13],[1," would return automatically include related crew members:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"movie"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n  },\\n  "],[10,1],[14,0,"hljs-string"],[12],[1,"\'crew-members\'"],[13],[1,": [\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie-id\'"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Matthew McConaughey\'"],[13],[1,"\\n    },\\n    {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie-id\'"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Anne Hathaway\'"],[13],[1,"\\n    },\\n    ...\\n  ]\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Mirage ships with two named serializers, JSONAPISerializer and ActiveModelSerializer, to save you the trouble of writing this custom code yourself. See the "],[10,3],[14,6,"../api/modules/serializer~Serializer"],[14,0,"docs-md__a"],[12],[1,"serializer guide"],[13],[1," to learn more."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"shorthands"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#shorthands"],[14,0,"heading-anchor"],[12],[1,"Shorthands"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage has "],[10,"em"],[12],[1,"shorthands"],[13],[1," to reduce the code needed for conventional API routes. For example, the route handler"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.authors.all();\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"can be written as"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"There are also shorthands for "],[10,"code"],[12],[1,"post"],[13],[1,", "],[10,"code"],[12],[1,"patch"],[13],[1," (or "],[10,"code"],[12],[1,"put"],[13],[1,"), and "],[10,"code"],[12],[1,"del"],[13],[1," methods. Here\'s a full set of resourceful routes for an "],[10,"code"],[12],[1,"author"],[13],[1," resource:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors/:id\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors/:id\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors/:id\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Shorthands make writing your server definition concise, so use them whenever possible. When mocking a new route, you should always start with a Shorthand, and then drop down to a function route handler when you need more control."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"passthrough"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#passthrough"],[14,0,"heading-anchor"],[12],[1,"Passthrough"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage is a great tool to use even if you\'re working on an existing app, or if you don\'t want to fake your entire API. By default, Mirage throws an error if your Ember app makes a request that doesn\'t have a corresponding route handler defined. To avoid this, tell Mirage to let unhandled requests pass through:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".passthrough();"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now you can develop as you normally would, for example against an existing API."],[13],[1,"\\n"],[10,2],[12],[1,"When it comes time to build a new feature, you don\'t have to wait for the API to be updated. Just define the new route that you need"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/comments\'"],[13],[1,");\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".passthrough();"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and you can fully develop and test the feature. In this way you can build up your fake server piece by piece - adding some solid acceptance tests along the way."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"That should be enough to get you started!"],[13],[1,"\\n"],[10,2],[12],[1,"The rest of the docs are organized by Mirage\'s higher-level concepts:"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,2],[12],[10,"strong"],[12],[1,"Route handlers"],[13],[1," contain the logic around what run-time data Mirage uses to respond to requests."],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[1,"The "],[10,"strong"],[12],[1,"Data layer"],[13],[1," is how Mirage stores and tracks changes to your data over time."],[13],[1,"\\n"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,2],[12],[1,"Keep reading to learn more!"],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/getting-started/overview/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/getting-started/upgrade-guide/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"bAZ+L82X",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"upgrade-guide"],[14,0,"docs-md__h1"],[12],[1,"Upgrade guide"],[13],[1,"\\n    "],[10,2],[12],[1,"If you\'re upgrading from an existing version of Mirage, you can run the following:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[10,1],[14,0,"hljs-meta"],[12],[1,"#"],[13],[1," Using npm\\nnpm install -D ember-cli-mirage@X.X.X\\n"],[10,1],[14,0,"hljs-meta"],[12],[1,"\\n#"],[13],[1," Using yarn\\nyarn add -D ember-cli-mirage@X.X.X"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"full-changelog"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#full-changelog"],[14,0,"heading-anchor"],[12],[1,"Full Changelog"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"You can view all of Mirage\'s release notes on "],[10,3],[14,6,"https://github.com/miragejs/ember-cli-mirage/releases"],[14,0,"docs-md__a"],[12],[1,"our Releases page"],[13],[1,"."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"1-0-upgrade-guide"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#1-0-upgrade-guide"],[14,0,"heading-anchor"],[12],[1,"1.0 Upgrade guide"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"There were a few breaking changes made in the 1.0 release."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"1-remove-faker-js"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#1-remove-faker-js"],[14,0,"heading-anchor"],[12],[1,"1. Remove Faker.js"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"When Mirage was first released, including npm libraries into Ember CLI apps was difficult. You needed to generate a vendor shim and call "],[10,"code"],[12],[1,"app.import"],[13],[1," in order to use the library in your application code."],[13],[1,"\\n"],[10,2],[12],[1,"Because of all this ceremony, it was common for addons to do that work for you, and bundle related packages. This is exactly what Mirage did for "],[10,3],[14,6,"https://github.com/Marak/faker.js"],[14,0,"docs-md__a"],[12],[1,"Faker.js"],[13],[1,", a useful library to have alongside your Mirage factory definitions."],[13],[1,"\\n"],[10,2],[12],[1,"There\'s a few problems with this, most notably that users "],[10,"em"],[12],[1,"had"],[13],[1," to use the version of Faker that was bundled with Mirage. It was frustrating not being able to take advantage of new Faker features until Mirage upgraded its bundled version."],[13],[1,"\\n"],[10,2],[12],[1,"Now, thanks to "],[10,3],[14,6,"https://github.com/ef4/ember-auto-import"],[14,0,"docs-md__a"],[12],[1,"Ember Auto Import"],[13],[1,", this is no longer the case. Using dependencies directly from npm is painless – just "],[10,"code"],[12],[1,"yarn/npm install"],[13],[1," them and "],[10,"code"],[12],[1,"import"],[13],[1," them directly from your ES6 classes. Thanks to Auto Import, all that ceremony is taken care of for you."],[13],[1,"\\n"],[10,2],[12],[1,"This also means that users can easily manage their project\'s version of Faker (and other similar dependencies) independently of the version of Mirage they\'re using."],[13],[1,"\\n"],[10,2],[12],[1,"For this reason, in 1.0 we are no longer bundling Faker.js with Mirage. This is a breaking change."],[13],[1,"\\n"],[10,2],[12],[1,"Here are the steps you\'ll need to take to fix this:"],[13],[1,"\\n\\n        "],[10,"ol"],[14,0,"docs-list-decimal"],[12],[10,"li"],[12],[1,"Install Ember Auto Import (if it\'s not already installed)"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"ember install ember-auto-import"],[13],[13],[1,"\\n\\n        "],[10,"ol"],[14,0,"docs-list-decimal"],[12],[10,"li"],[12],[1,"Install Faker.js directly from npm:"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"yarn add -D faker\\n"],[10,1],[14,0,"hljs-meta"],[12],[1,"\\n#"],[13],[1," or npm install --save-dev faker"],[13],[13],[1,"\\n\\n        "],[10,"ol"],[14,0,"docs-list-decimal"],[12],[10,"li"],[12],[1,"Change all imports of "],[10,"code"],[12],[1,"faker"],[13],[1," from the "],[10,"code"],[12],[1,"ember-cli-packge"],[13],[1," to import directly from "],[10,"code"],[12],[1,"faker"],[13],[1,":"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefineddiff"],[12],[10,1],[14,0,"hljs-deletion"],[12],[1,"- import { Factory, faker } from \'ember-cli-mirage\';"],[13],[1,"\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+ import { Factory } from \'ember-cli-mirage\';"],[13],[1,"\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+ import faker from \'faker\';"],[13],[13],[13],[1,"\\n"],[10,2],[12],[10,3],[14,6,"https://github.com/miragejs/ember-cli-mirage-faker-codemod"],[14,0,"docs-md__a"],[12],[1,"There is a codemod"],[13],[1," that will do this for you, thanks to the gracious work of "],[10,3],[14,6,"https://github.com/caseywatts"],[14,0,"docs-md__a"],[12],[1,"Casey Watts"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"Additionally, when I originally bundled Faker, I monkey-patched it with some methods that I thought would be \\"useful\\" additions. I thought this was a good idea at the time... it wasn\'t. 🙈"],[13],[1,"\\n"],[10,2],[12],[1,"You can look at "],[10,3],[14,6,"https://github.com/miragejs/ember-cli-mirage/blob/v0.4.15/addon/faker.js"],[14,0,"docs-md__a"],[12],[1,"the module from v0.4.15"],[13],[1," to see that we added the "],[10,"code"],[12],[1,"faker.list.random"],[13],[1,", "],[10,"code"],[12],[1,"faker.list.cycle"],[13],[1," and "],[10,"code"],[12],[1,"faker.random.number.range"],[13],[1," methods, so if you use these methods too, you\'ll need to refactor them."],[13],[1,"\\n"],[10,2],[12],[1,"Fortunately, two of them have been added to recent versions of Faker, and one can be replaced with some simple JS:"],[13],[1,"\\n"],[10,2],[12],[1,"For "],[10,"code"],[12],[1,"faker.list.random"],[13],[1,", use "],[10,"code"],[12],[1,"faker.random.arrayElement"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefineddiff"],[12],[1,"  countries() {\\n"],[10,1],[14,0,"hljs-deletion"],[12],[1,"-   return faker.list.random([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[13],[1,"\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+   return faker.random.arrayElement([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[13],[1,"\\n  }"],[13],[13],[1,"\\n"],[10,2],[12],[1,"For "],[10,"code"],[12],[1,"faker.list.cycle"],[13],[1,", use the remainder (modulo) operator:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefineddiff"],[12],[1,"  countries(i) {\\n"],[10,1],[14,0,"hljs-deletion"],[12],[1,"-   return faker.list.cycle([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+   let countries = [ \'United States of America\', \'Canada\', \'Mexico\' ];"],[13],[1,"\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+"],[13],[1,"\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+   return countries[i % countries.length];"],[13],[1,"\\n  }"],[13],[13],[1,"\\n"],[10,2],[12],[1,"For "],[10,"code"],[12],[1,"faker.random.number.range"],[13],[1,", use "],[10,"code"],[12],[1,"faker.random.number"],[13],[1," with min and max options:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefineddiff"],[12],[1,"  age() {\\n"],[10,1],[14,0,"hljs-deletion"],[12],[1,"-   return faker.random.number.range(18, 65);"],[13],[1,"\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+   return faker.random.number({ min: 18, max: 65 });"],[13],[1,"\\n  }"],[13],[13],[1,"\\n"],[10,2],[12],[1,"After that, you should be on your own with respect to Faker! Thanks to Auto Import, you can change versions, or even try out other libraries like "],[10,3],[14,6,"https://chancejs.com/"],[14,0,"docs-md__a"],[12],[1,"Chance.js"],[13],[1,", and rest easy knowing Mirage is a bit slimmer and one less thing is beyond your control."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"2-new-import-for-setupmirage"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#2-new-import-for-setupmirage"],[14,0,"heading-anchor"],[12],[1,"2. New import for setupMirage"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Please use the new named import for the setupMirage test helper. The old one still works for now but is not robust to us refactoring the internal file location. The named export is also more aligned with the rest of the ecosystem."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Before"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," setupMirage "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage/test-support/setup-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// After"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupMirage } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage/test-support\\""],[13],[1,";"],[13],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"3-remove-deprecated-forms-of-create-createlist-and-normalizedrequestattrs"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#3-remove-deprecated-forms-of-create-createlist-and-normalizedrequestattrs"],[14,0,"heading-anchor"],[12],[1,"3. Remove deprecated forms of "],[10,"code"],[12],[1,"create"],[13],[1,", "],[10,"code"],[12],[1,"createList"],[13],[1," and "],[10,"code"],[12],[1,"normalizedRequestAttrs"],[13],[13],[13],[1,"\\n    "],[10,2],[12],[1,"There are several places in Mirage\'s APIs that were intended to be used with singularized versions of model names, but just so happened to work if a non-singularized version was passed in."],[13],[1,"\\n"],[10,2],[12],[1,"This behavior was discovered during a refactor, and the non-singularized versions were maintained to avoid breaking apps. Now that we\'re moving to 1.0, we\'re removing this deprecated/unintentional behavior."],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,2],[12],[10,"code"],[12],[1,"server.create"],[13],[1," and "],[10,"code"],[12],[1,"server.createList"],[13],[1," were coded to take a singularized model name, e.g. "],[10,"code"],[12],[1,"server.create(\'user\')"],[13],[1,". It just so happens that "],[10,"code"],[12],[1,"server.create(\'users\')"],[13],[1," also works. That pluralized version is now removed from Mirage."],[13],[1,"\\n"],[10,2],[12],[1,"If you\'re running the latest 0.x version you should see a deprecation message letting you know where to change it. Otherwise, it should be a pretty mechanic change from things like "],[10,"code"],[12],[1,"server.create(\'users\')"],[13],[1," to "],[10,"code"],[12],[1,"server.create(\'user\')"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"Note this also applies to "],[10,"code"],[12],[1,"server.createList"],[13],[1," – the correct form is "],[10,"code"],[12],[1,"server.createList(\'user\', 3)"],[13],[1,", and the pluralized form "],[10,"code"],[12],[1,"server.createList(\'users\', 3)"],[13],[1," is now unsupported."],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[10,"code"],[12],[1,"this.normalizedRequestAttrs"],[13],[1," in a route handler optionally takes a modelName as an argument. This is if your URLs are non-standard and Mirage cannot guess the modelName from the URL path."],[13],[1,"\\n"],[10,2],[12],[1,"In this case, you can call "],[10,"code"],[12],[1,"this.normalizedRequestAttrs(\'blog-post\')"],[13],[1," to tell Mirage to expect the payload to be for a "],[10,"code"],[12],[1,"blog-post"],[13],[1," model."],[13],[1,"\\n"],[10,2],[12],[1,"This API was intended to be used with dasherized names, because that\'s how compound model names are specified throughout Mirage when they are represented as strings."],[13],[1,"\\n"],[10,2],[12],[1,"It just so happened that "],[10,"code"],[12],[1,"this.normalizedRequestAttrs(\'blogPost\')"],[13],[1," also worked, by chance, until a refactor. So, that behavior was kept but now is being removed."],[13],[1,"\\n"],[10,2],[12],[1,"The correct usage is "],[10,"code"],[12],[1,"this.normalizedRequestAttrs(\'blog-post\')"],[13],[1,". Using the camelized version of the model name is no longer supported."],[13],[1,"\\n"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,2],[12],[1,"If either of these changes cause a ton of refactoring pain, we can try to marshal some resources to help write a codemod. Please open an issue if that\'s the case!"],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"4-the-normalizeids-serializer-property-now-defaults-to-true"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#4-the-normalizeids-serializer-property-now-defaults-to-true"],[14,0,"heading-anchor"],[12],[1,"4. The "],[10,"code"],[12],[1,"normalizeIds"],[13],[1," serializer property now defaults to true"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"This applies to the ActiveModelSerializer and RestSerializer."],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"normalize"],[13],[1," property on serializers helps Mirage\'s shorthands work by transforming differently formatted payloads into JSON:API documents. These documents are then used by Mirage to update the database accordingly."],[13],[1,"\\n"],[10,2],[12],[1,"There was a gap in the default "],[10,"code"],[12],[1,"normalize"],[13],[1," method for a long time, in that it didn\'t take REST payloads that included foreign keys and looked like"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," payload = {\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"contact"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"Link\\""],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"address"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,"\\n  }\\n};"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and turn that "],[10,"code"],[12],[1,"address"],[13],[1," key into a proper JSON:API relationship:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"data: {\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'contacts\'"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,",\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Link\'"],[13],[1,"\\n  },\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"address"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'address\'"],[13],[1,",\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,"\\n      }\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"We added this feature a while ago, and it\'s controlled with the "],[10,"code"],[12],[1,"normalizeIds"],[13],[1," property on the ActiveModelSerializer and RESTSerializer. (We did this so the feature wouldn\'t be a breaking change.)"],[13],[1,"\\n"],[10,2],[12],[1,"We\'re now making "],[10,"code"],[12],[1,"true"],[13],[1," the default, which should be the behavior everyone desires (assuming they\'re using shorthands). This is technically a breaking change, though it\'s unlikely to affect most people."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"0-3-x-0-4-upgrade-guide"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#0-3-x-0-4-upgrade-guide"],[14,0,"heading-anchor"],[12],[1,"0.3.x → 0.4 Upgrade guide"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"There is one primary change in 0.4 that could break your 0.3 app."],[13],[1,"\\n"],[10,2],[12],[1,"In 0.3.x, Mirage\'s JSONAPISerializer included all related foreign keys whenever serializing a model or collection, even if those relationships were not being "],[10,"code"],[12],[1,"included"],[13],[1," in the payload."],[13],[1,"\\n"],[10,2],[12],[1,"This actually goes against JSON:API\'s design. Foreign keys in the payload are known as "],[10,3],[14,6,"http://jsonapi.org/format/#document-resource-object-linkage"],[14,0,"docs-md__a"],[12],[1,"Resource Linkage"],[13],[1," and are intended to be used by API clients to link together all resources in a JSON:API compound document. In fact, most server-side JSON:API libraries do not automatically serialize all related foreign keys, and only return linkage data for related resources when they are being included in the current document."],[13],[1,"\\n"],[10,2],[12],[1,"By including linkage data for every relationship in 0.3, it was easy to develop Ember apps that would work with Mirage but would behave differently when hooked up to a standard JSON:API server. Since Mirage always included linkage data, an Ember app might automatically be able to fetch related resources using the ids from that linkage data plus its knowledge about the API. For example, if a "],[10,"code"],[12],[1,"post"],[13],[1," came back like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /posts/1"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'posts\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": { ... },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n          "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'users\'"],[13],[1,",\\n          "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,"\\n        }\\n      }\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and you forgot to "],[10,"code"],[12],[1,"?include=author"],[13],[1," in your GET request, Ember Data would potentially use the "],[10,"code"],[12],[1,"user:1"],[13],[1," foreign key and lazily fetch the "],[10,"code"],[12],[1,"author"],[13],[1," by making a request to "],[10,"code"],[12],[1,"GET /authors/1"],[13],[1,". This is problematic because"],[13],[1,"\\n\\n        "],[10,"ol"],[14,0,"docs-list-decimal"],[12],[10,"li"],[12],[1,"This is not how foreign keys are intended to be used"],[13],[1,"\\n"],[10,"li"],[12],[1,"It\'d be better to see no data and fix the problem by going back up to your data-loading code and add "],[10,"code"],[12],[1,"?include=author"],[13],[1," to your GET request, or"],[13],[1,"\\n"],[10,"li"],[12],[1,"If you do want your interface to lazily load the author, use resource "],[10,"code"],[12],[1,"links"],[13],[1," instead of the resource linkage "],[10,"code"],[12],[1,"data"],[13],[1,":"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// GET /posts/1"],[13],[1,"\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'posts\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'1\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": { ... },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"links"],[13],[1,": {\\n          "],[10,1],[14,0,"hljs-attr"],[12],[1,"related"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'/api/users/1\'"],[13],[1,"\\n        }\\n      }\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Resource links can be defined on Mirage serializers using the "],[10,3],[14,6,"http://www.ember-cli-mirage.com/docs/v0.3.x/serializers/#linksmodel"],[14,0,"docs-md__a"],[12],[1,"links"],[13],[1," method (though "],[10,"code"],[12],[1,"including"],[13],[1," is likely the far more simpler and common approach to fetching related data)."],[13],[1,"\\n"],[10,2],[12],[1,"So, Mirage 0.4 changed this behavior and by default, the JSONAPISerializer only includes linkage data for relationships that are being included in the current payload (i.e. within the same compound document)."],[13],[1,"\\n"],[10,2],[12],[1,"This behavior is configurable via the "],[10,"code"],[12],[1,"alwaysIncludeLinkageData"],[13],[1," key on your JSONAPISerializers. It is set to "],[10,"code"],[12],[1,"false"],[13],[1," by default, but if you want to opt-in to 0.3 behavior and always include linkage data, set it to "],[10,"code"],[12],[1,"true"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/serializers/application.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { JSONAPISerializer } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," JSONAPISerializer.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"alwaysIncludeLinkageData"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If you do this, I would recommend looking closely at how your real server behaves when serializing resources\' relationships and whether it uses resource "],[10,"code"],[12],[1,"links"],[13],[1," or resource linkage "],[10,"code"],[12],[1,"data"],[13],[1,", and to update your Mirage code accordingly to give you the most faithful representation of your server."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"0-2-x-0-3-upgrade-guide"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#0-2-x-0-3-upgrade-guide"],[14,0,"heading-anchor"],[12],[1,"0.2.x → 0.3 Upgrade guide"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The main change from 0.2.x to 0.3.x is that relationships are now one-way. This better matches the semantics of both Ember Data and common HTTP transfer protocols like JSON:API."],[13],[1,"\\n"],[10,2],[12],[1,"In 0.2, the following model definitions"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/author.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, belongsTo } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": belongsTo()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"would have generated a \\"schema\\" with a one-to-many relationship between authors and posts: an author has many posts, and a post belongs to an author. Now, this just generates a one-way relationship from "],[10,"code"],[12],[1,"post"],[13],[1," to "],[10,"code"],[12],[1,"author"],[13],[1,". To have a two-way sync\'d relationship, known as an inverse, you\'d need to define both sides of the relationship:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/author.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, hasMany } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"posts"],[13],[1,": hasMany()\\n});\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/models/post.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model, belongsTo } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"author"],[13],[1,": belongsTo()\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Practically speaking, to upgrade you\'ll need to go through your code and update relationships that implicitly had inverses (from 0.2.x\'s hasMany and belongsTo behavior) and update them to define both sides."],[13],[1,"\\n"],[10,2],[12],[1,"This could also affect your fixture files, if you are using those to seed your database. Instead of just having an authorId on the post above, for example, you\'d also need the author to have a "],[10,"code"],[12],[1,"postIds: []"],[13],[1," array. (In general Factories are better for seeding your database, as they save you from having to manage ids at all.)"],[13],[1,"\\n"],[10,2],[12],[1,"Conceptually this change should be straightforward, as its making existing implicit relationships explicit, but if you find yourself having trouble with the upgrade it\'s probably because of something I haven\'t thought of. Please reach out to the community on the #ec-mirage channel on Slack and ask for help!"],[13],[1,"\\n"],[10,2],[12],[1,"For more information on the motivation behind change, please read the "],[10,3],[14,6,"http://www.ember-cli-mirage.com/blog/2017/01/09/0-3-0-beta-series/"],[14,0,"docs-md__a"],[12],[1,"0-3 beta series release blog post"],[13],[1,"."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"0-1-x-0-2-upgrade-guide"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#0-1-x-0-2-upgrade-guide"],[14,0,"heading-anchor"],[12],[1,"0.1.x → 0.2 Upgrade guide"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"If you\'re upgrading your Mirage server from v0.1.x to v0.2.x, here\'s what you need to know:"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,2],[12],[10,"strong"],[12],[1,"The default Mirage directory has changed."],[13],[1," The default Mirage directory has moved from "],[10,"code"],[12],[1,"/app/mirage"],[13],[1," to "],[10,"code"],[12],[1,"/mirage"],[13],[1,". When you install 0.2.0, the default blueprint will add the "],[10,"code"],[12],[1,"/mirage"],[13],[1," directory to your project. You can delete it and move your current Mirage files to the new location with something like"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"rm -rf mirage\\nmv app/mirage mirage"],[13],[13],[1,"\\n"],[10,2],[12],[1,"from the root of your project. Mirage\'s directory is also "],[10,3],[14,6,"../configuration/#directory"],[14,0,"docs-md__a"],[12],[1,"customizable"],[13],[1," (Although you should move it from the "],[10,"code"],[12],[1,"/app"],[13],[1," directory or else it will not be removed from the build in production mode)."],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[10,"strong"],[12],[1,"All multiword filenames are dasherized."],[13],[1," In Mirage 0.1.x, database collection names were taken from filenames. The idea was, if your API returned snake_case collection keys (e.g. "],[10,"code"],[12],[1,"blog_posts: []"],[13],[1,"), just name your file "],[10,"code"],[12],[1,"fixtures/blog_posts.js"],[13],[1,". This approach turned out to be insufficiently flexib-- what am I saying, it was just a bad idea :P."],[13],[1,"\\n"],[10,2],[12],[1,"In Mirage 0.2.x, we follow Ember CLI\'s conventions of dasherized filenames. So, you\'ll just need to go through and change"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"/mirage/factories/blog_post.js\\n/mirage/fixtures/blog_post.js\\n"],[10,1],[14,0,"hljs-meta"],[12],[1,"#"],[13],[1," etc."],[13],[13],[1,"\\n"],[10,2],[12],[1,"to"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedsh"],[12],[1,"/mirage/factories/blog-post.js\\n/mirage/fixtures/blog-post.js"],[13],[13],[1,"\\n"],[10,2],[12],[1,"You will then use the "],[10,3],[14,6,"../serializers"],[14,0,"docs-md__a"],[12],[1,"new Serializer layer"],[13],[1," to do things like format keys in your json payloads."],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[10,"strong"],[12],[1,"All JavaScript properties are camelCased."],[13],[1," Similar to the previous change, factory properties and database collection names followed the format of your API in Mirage 0.1.x. If you were faking an ActiveModelSerializer backend, multiword keys used snake_case throughout your Mirage code. So, your database table might be "],[10,"code"],[12],[1,"db.blog_posts"],[13],[1,", and your factory keys might be "],[10,"code"],[12],[1,"first_name() {..}"],[13],[1,". Looks pretty cool right?"],[13],[1,"\\n"],[10,2],[12],[1,"Wrong. We\'re JavaScript developers here, people. It\'s time to start using camelCase. (Also, the idea of tying these keys to your serialization format was bad, as it left us without any conventions. We need to stick to a single format, so the ORM knows how to find foreign keys.)"],[13],[1,"\\n"],[10,2],[12],[1,"You\'ll need to update your route handlers, which may look like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," posts = db.blog_posts.filter("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"p"],[13],[1," =>"],[13],[1," p.author_id === "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"to"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," posts = db.blogPosts.filter("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"p"],[13],[1," =>"],[13],[1," p.authorId === "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note that everything is camelCased, including foreign keys."],[13],[1,"\\n"],[10,2],[12],[1,"Similarly, factories that look like"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n  first_name() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," faker.name.firstName();\\n  },\\n\\n  last_name() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," faker.name.firstName();\\n  }\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"should be changed to"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Factory.extend({\\n  firstName() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," faker.name.firstName();\\n  },\\n\\n  lastName() {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," faker.name.firstName();\\n  }\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This goes for all attrs that "],[10,"code"],[12],[1,"server.create"],[13],[1," takes (and returns), etc. For many this will be the most painful part of the upgrade. Please find it in your heart to forgive me."],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[10,"strong"],[12],[1,"Mirage now has its own Model layer (an ORM)."],[13],[1," In Mirage 0.1.x, you had to define either a factory or a fixture file (or both) in order for a database collection to be created, which let you take advantage of the db in your route handlers. In 0.2, we\'ve introduced Mirage Models, which serve as the new canonical source of truth about your database."],[13],[1,"\\n"],[10,2],[12],[1,"To create a model, use"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"ember g mirage-model blog-post"],[13],[13],[10,2],[12],[1,"This will create a file like"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Model } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\\"ember-cli-mirage\\""],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Model.extend({});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Having that file sets up the "],[10,"code"],[12],[1,"db.blogPosts"],[13],[1," collection, allows you to use the JSON:API serializer, and more. You can still define factories and fixtures - but only if you need them. "],[3," not yet! in 0.6.0 For instance, given the model above, `server.create(\'blog-post\')` would create a blank `blog-post` model. You could then make a factory for models that need more customization. "],[1," Models, factories and fixtures all work together, but now you won\'t be making blank factory or fixture files just to set up your database. The models themselves serve as the source of truth."],[13],[1,"\\n"],[10,2],[12],[1,"We needed to add models for "],[10,3],[14,6,"../models/#associations"],[14,0,"docs-md__a"],[12],[1,"association support"],[13],[1," (which currently exists) and factory relationships (the first feature to come after the 0.2 release). Read through the "],[10,3],[14,6,"../models"],[14,0,"docs-md__a"],[12],[1,"models guide"],[13],[1," and "],[10,3],[14,6,"../serializers"],[14,0,"docs-md__a"],[12],[1,"serializers guide"],[13],[1," to see how having models can simplify your Mirage server."],[13],[1,"\\n"],[10,2],[12],[1,"We also have a plan to make a separate addon that could ascertain your model definitions and their relationships from your Ember Data models. Adding the ORM paves the way for this important future addition."],[13],[1,"\\n"],[10,2],[12],[1,"Currently, Mirage will still work if a factory/fixture file is defined for a particular db collection without a corresponding model. Eventually, we may require all setups to have model definitions for each collection. But for now, to make for an easier upgrade path, you can start generating models and opt-in to the ORM layer in piecemeal."],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[10,"strong"],[12],[1,"The ORM object "],[10,"code"],[12],[1,"schema"],[13],[1," is now injected into route handlers."],[13],[1," In Mirage 0.1.x, the "],[10,"code"],[12],[1,"db"],[13],[1," was the first parameter injected into route handlers:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"/posts\\""],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"db, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// work with db"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now, the "],[10,"code"],[12],[1,"schema"],[13],[1," object is, so you can take advantage of the Model layer. Fortunately, the "],[10,"code"],[12],[1,"db"],[13],[1," hangs directly off of the "],[10,"code"],[12],[1,"schema"],[13],[1,", so you can leave all your old route handler code intact (with the exception of making the change to camelCase), and just use destructuring to change the function signature to"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"/posts\\""],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"{ db }, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// work with db"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"and then start opting-in to the ORM (and using "],[10,"code"],[12],[1,"schema"],[13],[1,") one route handler at a time."],[13],[1,"\\n"],[13],[1,"\\n"],[10,"li"],[12],[10,2],[12],[10,"strong"],[12],[1,"Specify a Serializer."],[13],[1," If you\'re using shorthands, you\'ll need to pick a serializer in "],[10,"code"],[12],[1,"/mirage/serializers/application.js"],[13],[1,". See the "],[10,3],[14,6,"../serializers"],[14,0,"docs-md__a"],[12],[1,"serializers guide"],[13],[1," for details."],[13],[1,"\\n"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"You can always view the "],[10,3],[14,6,"https://github.com/miragejs/ember-cli-mirage/blob/master/CHANGELOG.md"],[14,0,"docs-md__a"],[12],[1,"full changelog"],[13],[1," to see everything that\'s changed. If you think this guide missed a critical part of the upgrade path, please "],[10,3],[14,6,"https://github.com/miragejs/ember-cli-mirage/issues/new"],[14,0,"docs-md__a"],[12],[1,"open an issue"],[13],[1,"!"],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/getting-started/upgrade-guide/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/getting-started/what-is-mirage/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"oN+Q8sMW",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"what-is-mirage-"],[14,0,"docs-md__h1"],[12],[1,"What is Mirage?"],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage is a JavaScript library that lets frontend developers mock out backend APIs."],[13],[1,"\\n"],[10,2],[12],[1,"Unlike other mocking libraries, Mirage makes it easy to reproduce dynamic scenarios that are typically only possible when using a true production server."],[13],[1,"\\n"],[10,2],[12],[1,"Equipped with a Mirage server, a frontend developer can build, test, and even share a complete working Ember application without having to use or configure any backend services."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"why-"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#why-"],[14,0,"heading-anchor"],[12],[1,"Why?"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage was originally built to bring conventions to some home-grown HTTP mocking code that was getting unwieldy. It ended up proving most useful when it enabled frontend developers to work on their apps without having to rely on any local or staging backend services as part of their normal development workflow."],[13],[1,"\\n"],[10,2],[12],[1,"Since then, Mirage has focused on making it as easy as possible for Ember developers to maintain a mock server alongside their codebase."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"how-it-works"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#how-it-works"],[14,0,"heading-anchor"],[12],[1,"How it works"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage runs in the browser. It uses "],[10,3],[14,6,"https://github.com/pretenderjs/pretender"],[14,0,"docs-md__a"],[12],[1,"Pretender.js"],[13],[1," to intercept and respond to any network requests your Ember app makes, letting you build your app as if it were talking to a real server."],[13],[1,"\\n"],[10,2],[12],[1,"In this way, you can develop and test your app against various server states without having to modify any application code."],[13],[1,"\\n"],[10,2],[12],[1,"In addition to intercepting HTTP requests, Mirage provides a mock database and helper functions that make it easy to simulate dynamic backend services."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage borrows concepts from server-side frameworks like"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,"strong"],[12],[1,"routes"],[13],[1," to handle HTTP requests"],[13],[1,"\\n"],[10,"li"],[12],[1,"a "],[10,"strong"],[12],[1,"database"],[13],[1," and "],[10,"strong"],[12],[1,"models"],[13],[1," for storing data and defining relationships"],[13],[1,"\\n"],[10,"li"],[12],[10,"strong"],[12],[1,"factories"],[13],[1," and "],[10,"strong"],[12],[1,"fixtures"],[13],[1," for stubbing data, and"],[13],[1,"\\n"],[10,"li"],[12],[10,"strong"],[12],[1,"serializers"],[13],[1," for formatting HTTP responses"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,2],[12],[1,"to make it easy to simulate production server behavior."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"alternatives"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#alternatives"],[14,0,"heading-anchor"],[12],[1,"Alternatives"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"These other libraries solve similar problems to Mirage and might be a better fit for your needs:"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[10,3],[14,6,"https://netflix.github.io/pollyjs/#/"],[14,0,"docs-md__a"],[12],[1,"Polly.js"],[13],[1,", a library for recording and replaying HTTP interactions"],[13],[1,"\\n"],[10,"li"],[12],[10,3],[14,6,"https://github.com/pretenderjs/pretender"],[14,0,"docs-md__a"],[12],[1,"Pretender.js"],[13],[1,", the low-level HTTP interceptor powering Mirage"],[13],[1,"\\n"],[10,"li"],[12],[10,3],[14,6,"https://github.com/danielspaniel/ember-data-factory-guy"],[14,0,"docs-md__a"],[12],[1,"Ember Data Factory Guy"],[13],[1,", factories for Ember apps powered by Ember Data"],[13],[1,"\\n"],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/getting-started/what-is-mirage/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/index/route",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Route.extend({beforeModel:function(){this.transitionTo("docs.getting-started.what-is-mirage")}})
e.default=t})),define("dummy/pods/docs/route-handlers/functions/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"8+hvTw8E",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"functions"],[14,0,"docs-md__h1"],[12],[1,"Functions"],[13],[1,"\\n    "],[10,2],[12],[1,"Function handlers are the most flexible way to write route handlers in Mirage."],[13],[1,"\\n"],[10,2],[12],[1,"To define new function handlers, use the "],[10,"code"],[12],[1,"get"],[13],[1,", "],[10,"code"],[12],[1,"post"],[13],[1,", "],[10,"code"],[12],[1,"patch"],[13],[1," (or "],[10,"code"],[12],[1,"put"],[13],[1,") and "],[10,"code"],[12],[1,"del"],[13],[1," methods. Here\'s an example:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", () => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Inception\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dunkirk\'"],[13],[1," ];\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now when your Ember app makes a GET request to "],[10,"code"],[12],[1,"/movies"],[13],[1,", it will receive this data."],[13],[1,"\\n"],[10,2],[12],[1,"Each verb method has the same signature. The first argument is the path (URL) and the second is the actual function handler that returns the response."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", () => { ... });\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", () => { ... });\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,", () => { ... });\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,", () => { ... });"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"timing"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#timing"],[14,0,"heading-anchor"],[12],[1,"Timing"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The last argument to a route handler is an options object you can use to adjust the timing. Use this to delay the response of a particular route and see how your Ember app behaves when communicating with a slow network."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", () => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Inception\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dunkirk\'"],[13],[1," ];\\n}, { "],[10,1],[14,0,"hljs-attr"],[12],[1,"timing"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"4000"],[13],[1," });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The default delay is 50ms during development, and 0 during testing (so your tests run fast)."],[13],[1,"\\n"],[10,2],[12],[1,"You can also set a global timing parameter for all routes. Individual timing parameters override the global setting."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".namespace = "],[10,1],[14,0,"hljs-string"],[12],[1,"\'api\'"],[13],[1,";\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".timing = "],[10,1],[14,0,"hljs-number"],[12],[1,"2000"],[13],[1,";\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", () => {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Inception\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Dunkirk\'"],[13],[1," ];\\n  });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/complex-query\'"],[13],[1,", () => {\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," ["],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"2"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"4"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1,"];\\n  }, { "],[10,1],[14,0,"hljs-attr"],[12],[1,"timing"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"3000"],[13],[1," });\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If you want to add delays to a test, you can override the timing for individual tests by putting the timing parameter in your test"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'this route works with a delay\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  server.timing = "],[10,1],[14,0,"hljs-number"],[12],[1,"10000"],[13],[1,";\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ..."],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Because the server is reset after each test, this option won\'t leak into the rest of your suite."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"accessing-the-data-layer"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#accessing-the-data-layer"],[14,0,"heading-anchor"],[12],[1,"Accessing the data layer"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Route handlers receive "],[10,"code"],[12],[1,"schema"],[13],[1," as their first parameter, which lets them access Mirage\'s data layer:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", (schema) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.all();\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Most of your route handlers will interact with the data layer in some way."],[13],[1,"\\n"],[10,2],[12],[1,"The second parameter is the "],[10,"code"],[12],[1,"request"],[13],[1," object, which contains information about the request your Ember app made. For example, you can access dynamic URL segments from it:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," id = request.params.id;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.find(id);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"You can also access the request body, for example to handle a POST or PATCH request that contains data sent over by the Ember app:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," title = "],[10,1],[14,0,"hljs-built_in"],[12],[1,"JSON"],[13],[1,".parse(request.requestBody).title;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.create({ title });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"normalizedRequestAttrs"],[13],[1," helper (documented below) provides some sugar for working with the request data."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"dynamic-paths-and-query-params"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#dynamic-paths-and-query-params"],[14,0,"heading-anchor"],[12],[1,"Dynamic paths and query params"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The request object that\'s injected into your route handlers contains any dynamic route segments and query params."],[13],[1,"\\n"],[10,2],[12],[1,"To define a route that has a dynamic segment, use colon syntax ("],[10,"code"],[12],[1,":segment"],[13],[1,") in your path. The dynamic piece will be available via "],[10,"code"],[12],[1,"request.params.[segment]"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," id = request.params.id;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.authors.find(id);\\n})"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Query params from the request can also be accessed via "],[10,"code"],[12],[1,"request.queryParams.[param]"],[13],[1,"."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"helpers"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#helpers"],[14,0,"heading-anchor"],[12],[1,"Helpers"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"There are several helpers available when writing function route handlers."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"serialize"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#serialize"],[14,0,"heading-anchor"],[12],[1,"serialize"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"This helper returns the JSON for the given Model or Collection after passing it through the Serializer layer. It\'s useful if you want to do some final munging on the serialized JSON before returning it."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," ("],[10,1],[14,0,"hljs-params"],[12],[1,"schema"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movies = schema.movies.all();\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," json = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".serialize(movies);\\n\\n  json.meta = { "],[10,1],[14,0,"hljs-attr"],[12],[1,"page"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1," };\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," json;\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"By default this method uses the named serializer for the given Model or Collection. You can pass in a specific serializer name as the second argument:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1," ("],[10,1],[14,0,"hljs-params"],[12],[1,"schema"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movies = schema.movies.all();\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," json = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".serialize(movies, "],[10,1],[14,0,"hljs-string"],[12],[1,"\'sparse-movie\'"],[13],[1,");\\n\\n  json.meta = { "],[10,1],[14,0,"hljs-attr"],[12],[1,"page"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1," };\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," json;\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"normalizedrequestattrs"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#normalizedrequestattrs"],[14,0,"heading-anchor"],[12],[1,"normalizedRequestAttrs"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"This helper returns the body of a request in a normalized form, suitable for working with and creating records."],[13],[1,"\\n"],[10,2],[12],[1,"For example, if your Ember app makes a POST request with this data"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// POST /users"],[13],[1,"\\n\\n{\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'users\'"],[13],[1,",\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"attributes"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'first-name\'"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Conan\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'middle-name\'"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'the\'"],[13],[1,",\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'last-name\'"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Barbarian\'"],[13],[1,"\\n    },\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"relationships"],[13],[1,": {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"team"],[13],[1,": {\\n        "],[10,1],[14,0,"hljs-attr"],[12],[1,"data"],[13],[1,": {\\n          "],[10,1],[14,0,"hljs-attr"],[12],[1,"type"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'teams\'"],[13],[1,",\\n          "],[10,1],[14,0,"hljs-attr"],[12],[1,"id"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,"\\n        }\\n      }\\n    }\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"then "],[10,"code"],[12],[1,"normalizedRequestAttrs()"],[13],[1," could be used like this"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/users\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," attrs = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".normalizedRequestAttrs();\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"/*\\n    attrs = {\\n      firstName: \'Conan\',\\n      middleName: \'the\',\\n      lastName: \'Barbarian\',\\n      teamId: \'1\'\\n    }\\n  */"],[13],[1,"\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.users.create(attrs);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Note that attribute keys were camelCased, and the "],[10,"code"],[12],[1,"team"],[13],[1," foreign key was extracted. This is because a "],[10,"code"],[12],[1,"user"],[13],[1," owns the "],[10,"code"],[12],[1,"team"],[13],[1," foreign key; if another relationship were included in the request but the "],[10,"code"],[12],[1,"user"],[13],[1," did not own its foreign key, it would not have been extracted."],[13],[1,"\\n"],[10,2],[12],[1,"This helper method leverages your serializer\'s "],[10,"code"],[12],[1,"normalize"],[13],[1," method. In the example above, it\'s assumed that the app was using the "],[10,"code"],[12],[1,"JSONAPISerializer"],[13],[1,", which comes with the "],[10,"code"],[12],[1,"#normalize"],[13],[1," method already written. If you\'re not using one of the bundled serializers, you\'ll need to implement "],[10,"code"],[12],[1,"#normalize"],[13],[1," and have it return a JSON:API document to take advantage of this method."],[13],[1,"\\n"],[10,2],[12],[1,"Additionally, you\'ll need to use a full "],[10,"code"],[12],[1,"function"],[13],[1," here, as opposed to an ES6 arrow function (e.g "],[10,"code"],[12],[1,"() => { ... }"],[13],[1,"). This is because "],[10,"code"],[12],[1,"normalizedRequestAttrs"],[13],[1," requires the "],[10,"code"],[12],[1,"this"],[13],[1," context from the function handler, and an arrow function would bind this from the outer scope."],[13],[1,"\\n"],[10,2],[12],[10,"code"],[12],[1,"normalizedRequestAttrs()"],[13],[1," relies on a "],[10,"code"],[12],[1,"modelName"],[13],[1," to work and attempts to automatically detect it based on the URL of the request. If you use conventional URLs – for example, PATCH /users/1 – the helper should work. If you are using something custom – for example, PATCH /users/edit/1 – you’ll need to provide the "],[10,"code"],[12],[1,"modelName"],[13],[1," to the helper as the first argument:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/users/edit/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," attrs = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".normalizedRequestAttrs("],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ..."],[13],[1,"\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"status-codes-and-headers"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#status-codes-and-headers"],[14,0,"heading-anchor"],[12],[1,"Status codes and headers"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"By default, Mirage sets the HTTP status code of a response based on the verb being used for the route:"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[1,"GET is 200"],[13],[1,"\\n"],[10,"li"],[12],[1,"PATCH/PUT is 204"],[13],[1,"\\n"],[10,"li"],[12],[1,"POST is 201"],[13],[1,"\\n"],[10,"li"],[12],[1,"DEL is 204"],[13],[1,"\\n"],[13],[1,"\\n      "],[10,2],[12],[1,"PATCH/PUT and POST change to 200 if there is a response body."],[13],[1,"\\n"],[10,2],[12],[1,"Additionally, a header for "],[10,"code"],[12],[1,"Content-Type"],[13],[1," is set to "],[10,"code"],[12],[1,"application/json"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"You can customize both the response code and headers by returning an instance of the "],[10,"code"],[12],[1,"Response"],[13],[1," class in your route handler:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { Response } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/authors\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema, request"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," attrs = "],[10,1],[14,0,"hljs-built_in"],[12],[1,"JSON"],[13],[1,".parse(request.requestBody).author;\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"if"],[13],[1," (attrs.name) {\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.authors.create(attrs);\\n    } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"else"],[13],[1," {\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"new"],[13],[1," Response("],[10,1],[14,0,"hljs-number"],[12],[1,"400"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"some"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'header\'"],[13],[1," }, { "],[10,1],[14,0,"hljs-attr"],[12],[1,"errors"],[13],[1,": ["],[10,1],[14,0,"hljs-string"],[12],[1,"\'name cannot be blank\'"],[13],[1,"] });\\n    }\\n  });\\n}"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"external-origins"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#external-origins"],[14,0,"heading-anchor"],[12],[1,"External origins"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"You can use Mirage to simulate other-origin requests. By default, a route like"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", ...)"],[13],[13],[1,"\\n"],[10,2],[12],[1,"will hit the same origin that\'s serving your Ember app. To handle a different origin, use a fully qualified domain name:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'http://api.twitter.com/v1\'"],[13],[1,", ...)"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If your entire Ember app uses an external (other-origin) API, you can globally configure the domain via "],[10,"code"],[12],[1,"urlPrefix"],[13],[1,":"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/config.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".urlPrefix = "],[10,1],[14,0,"hljs-string"],[12],[1,"\'https://my.api.com\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// This route will handle requests to https://my.api.com/contacts"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", ...)"],[13],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"That\'s it on writing low-level function route handlers!"],[13],[1,"\\n"],[10,2],[12],[1,"Function route handlers are flexible, but also cumbersome to write out for every endpoint. If you\'re working with an API that\'s conventional enough, hopefully you\'ll be writing fewer function route handlers and more Shorthands, which we\'ll discuss in the next section."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/route-handlers/functions/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/route-handlers/shorthands/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"mcluWLdN",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"shorthands"],[14,0,"docs-md__h1"],[12],[1,"Shorthands"],[13],[1,"\\n    "],[10,2],[12],[1,"APIs have become more standardized, so Mirage has the concept of "],[10,"em"],[12],[1,"Shorthands"],[13],[1," to deal with common scenarios. Shorthands can replace many of your custom route handlers, dramatically simplifying your server definition."],[13],[1,"\\n"],[10,2],[12],[1,"For example, this function route handler"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.all();\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"is pretty standard: it responds to a URL path with a collection of the same name."],[13],[1,"\\n"],[10,2],[12],[1,"The Shorthand form of this is"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This is a complete route handler. It infers the model name from the last part of the URL, and returns the corresponding collection."],[13],[1,"\\n"],[10,2],[12],[1,"Returning a single movie by ID is just as easy:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"There are also Shorthands for creating and editing data. For example, this function route handler creates a new movie:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," attrs = "],[10,1],[14,0,"hljs-built_in"],[12],[1,"JSON"],[13],[1,".parse(request.requestBody).movie;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.movies.create(attrs);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"It\'s also pretty standard: it creates a new model using the attributes from the request payload. The equivalent Shorthand is"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"See the full list of available Shorthands below. Shorthands use default status codes based on the HTTP verb:"],[13],[1,"\\n\\n        "],[10,"ul"],[14,0,"docs-list-disc"],[12],[10,"li"],[12],[1,"GET, PATCH/PUT and DEL are 200"],[13],[1,"\\n"],[10,"li"],[12],[1,"POST is 201"],[13],[1,"\\n"],[13],[1,"\\n      \\n      "],[10,"h2"],[14,1,"get-shorthands"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#get-shorthands"],[14,0,"heading-anchor"],[12],[1,"GET Shorthands"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Fetching a collection:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthand"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");          "],[10,1],[14,0,"hljs-comment"],[12],[1,"// finds type by singularizing url"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'users\'"],[13],[1,"); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// optionally specify the collection as second param"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// equivalent"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", (schema) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.contacts.all(); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// users in the second case"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Fetching a model:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthand"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");         "],[10,1],[14,0,"hljs-comment"],[12],[1,"// finds type by singularizing url"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,"); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// optionally specify the type as second param"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// equivalent"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," id = request.params.id;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.contacts.find(id); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// users in the second case"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Fetching multiple models by ID (for example, "],[10,"code"],[12],[1,"GET /contacts?ids=1,3"],[13],[1,"):"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthand"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"coalesce"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1," });\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'users\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"coalesce"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1," });\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// equivalent"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", ({ contacts }, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," ids = request.queryParams.ids;\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," contacts.find(ids); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// users in the second case"],[13],[1,"\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"post-shorthands"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#post-shorthands"],[14,0,"heading-anchor"],[12],[1,"POST Shorthands"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Creating a resource:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthand"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");          "],[10,1],[14,0,"hljs-comment"],[12],[1,"// finds type by singularizing url"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,");  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// optionally specify the type as second param"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// equivalent"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," attrs = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".normalizedRequestAttrs();\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.contacts.create(attrs);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"For this POST shorthand to work, Mirage needs to know the format of the JSON payload your Ember app sends along with the request, so that it can insert the appropriate data into the database. See "],[10,3],[14,6,"/docs/api/modules/serializer~Serializer#normalize"],[14,0,"docs-md__a"],[12],[1,"the note on normalize"],[13],[1," in the Serializer docs for more information."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"patch-put-shorthands"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#patch-put-shorthands"],[14,0,"heading-anchor"],[12],[1,"PATCH/PUT Shorthands"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Updating a resource:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthand (these also work with this.put)"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");          "],[10,1],[14,0,"hljs-comment"],[12],[1,"// finds type by singularizing url"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,");  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// optionally specify the type as second param"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// equivalent"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"schema, request"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," id = request.params.id;\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," attrs = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".normalizedRequestAttrs();\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"return"],[13],[1," schema.contacts.find(id).update(attrs);\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"For this PATCH shorthand to work, Mirage needs to know the format of the JSON payload your Ember app sends along with the request, so that it can insert the appropriate data into the database. See the note on normalize in the Serializer docs for more information."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"delete-shorthands"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#delete-shorthands"],[14,0,"heading-anchor"],[12],[1,"DELETE Shorthands"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Destroying a resource:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthand"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");          "],[10,1],[14,0,"hljs-comment"],[12],[1,"// finds type by singularizing url"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'user\'"],[13],[1,");  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// optionally specify the type as second param"],[13],[1,"\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// equivalent"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", (schema, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," id = request.params.id;\\n\\n  schema.contacts.find(id).destroy();\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Destroying a resource and related models:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthand"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", ["],[10,1],[14,0,"hljs-string"],[12],[1,"\'contact\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'addresses\'"],[13],[1,"]);\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// equivalent"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,", ({ contacts }, request) => {\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," id = request.params.id;\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," contact = contacts.find(id);\\n\\n  contact.addresses.destroy();\\n  contact.destroy();\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"To use this Shorthand, you must have the appropriate "],[10,"code"],[12],[1,"hasMany"],[13],[1,"/"],[10,"code"],[12],[1,"belongsTo"],[13],[1," relationships defined in your data layer."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"resource-helper"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#resource-helper"],[14,0,"heading-anchor"],[12],[1,"Resource helper"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The "],[10,"em"],[12],[1,"resource"],[13],[1," helper lets you define multiple Shorthands for a given resource:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// Resource helper usage"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".resource("],[10,1],[14,0,"hljs-string"],[12],[1,"\'contacts\'"],[13],[1,");\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthands defined"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,"); "],[10,1],[14,0,"hljs-comment"],[12],[1,"// and this.put(\'/contacts/:id\')"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"You can also whitelist which Shorthands will be defined using the "],[10,"em"],[12],[1,"only"],[13],[1," option:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".resource("],[10,1],[14,0,"hljs-string"],[12],[1,"\'contacts\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"only"],[13],[1,": [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'index\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'show\'"],[13],[1," ] });\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthands defined"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"or which route handlers shouldn\'t be defined using "],[10,"em"],[12],[1,"except"],[13],[1," option:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".resource("],[10,1],[14,0,"hljs-string"],[12],[1,"\'contacts\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"except"],[13],[1,": [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'update\'"],[13],[1," ] });\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthands defined"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts/:id\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If your route path and collection names do not match, you can define a relative or absolute path using the "],[10,"em"],[12],[1,"path"],[13],[1," option:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".resource("],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-posts\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"path"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'/posts\'"],[13],[1," });\\n\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// Shorthands defined"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/posts\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-posts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".get("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/posts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-posts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/posts\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-posts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".put("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/posts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-posts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".patch("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/posts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-posts\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".del("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/posts/:id\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'blog-posts\'"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Here is the full reference of the actions\' names you can pass to the "],[10,"em"],[12],[1,"only"],[13],[1," / "],[10,"em"],[12],[1,"except"],[13],[1," options and the Shorthands they stand for:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[12],[1,"Action   |  Shorthand\\n------------------------------\\nindex    | this.get(\'/contacts\')\\nshow     | this.get(\'/contacts/:id\')\\ncreate   | this.post(\'/contacts\')\\nupdate   | this.patch(\'contacts/:id\') (or this.put)\\ndelete   | this.del(\'/contacts/:id\')"],[13],[13],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"Shorthands are a key part of staying productive in your frontend codebase, but they only work so well because Mirage has a Data Layer that\'s aware of your application\'s domain model."],[13],[1,"\\n"],[10,2],[12],[1,"We\'ll cover how it works in the next few sections of the docs."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/route-handlers/shorthands/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"ytzo1Z+X",block:'[[[6,[39,0],null,null,[["default"],[[[[1,"\\n"],[6,[30,1,["nav"]],null,null,[["default"],[[[[1,"    "],[1,[28,[30,2,["section"]],["Getting started"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["What is Mirage?","docs.getting-started.what-is-mirage"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Installation","docs.getting-started.installation"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Upgrade guide","docs.getting-started.upgrade-guide"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Overview","docs.getting-started.overview"],null]],[1,"\\n\\n    "],[1,[28,[30,2,["section"]],["Route handlers"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Functions","docs.route-handlers.functions"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Shorthands","docs.route-handlers.shorthands"],null]],[1,"\\n\\n    "],[1,[28,[30,2,["section"]],["Data layer"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["The Database","docs.data-layer.database"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Why an ORM?","docs.data-layer.orm"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Models","docs.data-layer.models"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Relationships","docs.data-layer.relationships"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Factories","docs.data-layer.factories"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Fixtures","docs.data-layer.fixtures"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Serializers","docs.data-layer.serializers"],null]],[1,"\\n"],[6,[30,2,["subnav"]],null,null,[["default"],[[[[1,"    "],[1,[28,[30,3,["item"]],["Ember Data Serializer","docs.data-layer.serializers.ember-data-serializer"],null]],[1,"\\n"]],[3]]]]],[1,"\\n    "],[1,[28,[30,2,["section"]],["Testing"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Acceptance tests","docs.testing.acceptance-tests"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Integration and unit tests","docs.testing.integration-and-unit-tests"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Assertions","docs.testing.assertions"],null]],[1,"\\n\\n    "],[1,[28,[30,2,["section"]],["Advanced"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Environment options","docs.advanced.environment-options"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Server Configuration","docs.advanced.server-configuration"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Simulating cookie responses","docs.advanced.simulating-cookie-responses"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Mocking GUIDs","docs.advanced.mocking-guids"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Customizing the inflector","docs.advanced.customizing-the-inflector"],null]],[1,"\\n    "],[1,[28,[30,2,["item"]],["Switching between scenarios","docs.advanced.switching-between-scenarios"],null]],[1,"\\n\\n"]],[2]]]]],[1,"\\n"],[6,[30,1,["main"]],null,null,[["default"],[[[[1,"    "],[46,[28,[37,2],null,null],null,null,null],[1,"\\n"]],[]]]]],[1,"\\n"]],[1]]]]]],["viewer","nav","nav"],false,["docs-viewer","component","-outlet"]]',moduleName:"dummy/pods/docs/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/testing/acceptance-tests/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"t6eFAWhF",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"acceptance-tests"],[14,0,"docs-md__h1"],[12],[1,"Acceptance tests"],[13],[1,"\\n    "],[10,2],[12],[1,"Acceptance testing your Ember app involves verifying some user behavior. For example, you may want to test that the user can view a list of movies on your app\'s homepage."],[13],[1,"\\n"],[10,2],[12],[1,"Many of these tests rely on a given server state. In other words, you want to test that, "],[10,"em"],[12],[1,"given ten movie resources exist on the server"],[13],[1," at the time the user boots up the app, when the user visits the homepage they see a list of 10 movies."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage was originally built specifically for these sorts of high-level tests. Let\'s see how it works."],[13],[1,"\\n"],[10,2],[12],[1,"Assuming you\'re using Application Tests (introduced in "],[10,3],[14,6,"https://emberjs.com/blog/2018/02/14/ember-3-0-released.html#toc_updates-to-the-testing-defaults"],[14,0,"docs-md__a"],[12],[1,"Ember 3.0"],[13],[1,"), add the "],[10,"code"],[12],[1,"setupMirage"],[13],[1," hook to the top of your test file:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefineddiff"],[12],[1,"  import { setupApplicationTest } from \'ember-qunit\';\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+ import { setupMirage } from \'ember-cli-mirage/test-support\';"],[13],[1,"\\n\\n\\n  module(\'Acceptance | Homepage test\', function(hooks) {\\n    setupApplicationTest(hooks);\\n"],[10,1],[14,0,"hljs-addition"],[12],[1,"+   setupMirage(hooks);"],[13],[1,"\\n\\n    test(\'my first test\', async function(assert) {\\n      // test code\\n    });\\n  });"],[13],[13],[1,"\\n"],[10,2],[12],[1,"(If you are using pre-3.0 style tests, Mirage should boot automatically via an initializer. The only other difference is that Mirage is accessed via "],[10,"code"],[12],[1,"server"],[13],[1,", a global, whereas in 3.0-style tests Mirage is accessed via "],[10,"code"],[12],[1,"this.server"],[13],[1,". The rest of this guide will assume 3.0-style tests, but you can just use "],[10,"code"],[12],[1,"server"],[13],[1," in place of "],[10,"code"],[12],[1,"this.server"],[13],[1," and the rest of the documentation applies the same.)"],[13],[1,"\\n"],[10,2],[12],[1,"Now we can run your Ember app\'s test suite with "],[10,"code"],[12],[1,"ember t -s"],[13],[1,"."],[13],[1,"\\n"],[10,2],[12],[1,"In the test environment, Mirage will load all your route handlers from "],[10,"code"],[12],[1,"mirage/config.js"],[13],[1,", but it will ignore your seed data from "],[10,"code"],[12],[1,"mirage/scenarios/default.js"],[13],[1,". That means each test starts off with a clean database state."],[13],[1,"\\n"],[10,2],[12],[1,"Within each test, you can use your factories to define your initial server state:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can view the movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'li.movie\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"count"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1," });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"After each test, Mirage\'s server will be reset, so none of this state will leak across tests."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"keeping-your-tests-focused"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#keeping-your-tests-focused"],[14,0,"heading-anchor"],[12],[1,"Keeping your tests focused"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Factories are important in keeping code that\'s relevant to a test as close to that test as possible. In the example above, we wanted to verify that the user would see ten movies, given those movies existed on the server. So, the "],[10,"code"],[12],[1,"server.createList(\'movie\', 10)"],[13],[1," call was directly in the test."],[13],[1,"\\n"],[10,2],[12],[1,"Say we wanted to test that when the user visits a details route for a movie titled \\"Interstellar,\\" they would see that title in an "],[10,"code"],[12],[1,"<h1>"],[13],[1," tag. One way to accomplish this would be to update the movie factory itself:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// mirage/factories/movie.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," Mirage "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," Mirage.Factory.extend({\\n  "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The problem with this approach is that this change is very specific to this test."],[13],[1,"\\n"],[10,2],[12],[1,"Suppose another test needed to verify something different about movies with different titles. Changing the factory to suit that case would break this test."],[13],[1,"\\n"],[10,2],[12],[1,"For this reason, you should use "],[10,"code"],[12],[1,"create"],[13],[1," and "],[10,"code"],[12],[1,"createList"],[13],[1," to override specific attributes of your model. This will keep code relevant to your test near your test, without making the rest of your test suite brittle."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can view the movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'li.movie\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"count"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1," });\\n});\\n\\ntest("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"I see the movies\'s title on the detail route\\""],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," movie = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", {\\n    "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,"\\n  });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"`/movies/"],[10,1],[14,0,"hljs-subst"],[12],[1,"${movie.id}"],[13],[1,"`"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'h1\'"],[13],[1,").hasText("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,");\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"arrange-act-assert"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#arrange-act-assert"],[14,0,"heading-anchor"],[12],[1,"Arrange, Act, Assert"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Mirage recommends using the "],[10,3],[14,6,"https://github.com/testdouble/contributing-tests/wiki/Arrange-Act-Assert"],[14,0,"docs-md__a"],[12],[1,"Arrange, Act, Assert approach"],[13],[1," to write tests. You\'ll sometimes hear this pattern referred to as "],[10,"strong"],[12],[1,"AAA testing"],[13],[1," (\\"triple-A testing\\")."],[13],[1,"\\n"],[10,2],[12],[1,"You can see this structure in our test from above:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can view the movies\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ARRANGE"],[13],[1,"\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ACT"],[13],[1,"\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ASSERT"],[13],[1,"\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'li.movie\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"count"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1," });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"There are of course times where it makes sense to break this rule (for example to add some extra assertions near the beginning or middle of a test), but in general you should strive to follow the pattern."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"testing-errors"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#testing-errors"],[14,0,"heading-anchor"],[12],[1,"Testing errors"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"To test how your Ember app responds to a server error, overwrite a route handler within a test:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'the user sees an error if the save attempt fails\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n   "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.post("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/questions\'"],[13],[1,", () => ({\\n     "],[10,1],[14,0,"hljs-attr"],[12],[1,"errors"],[13],[1,": [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'The database went on vacation\'"],[13],[1," ]\\n   }), "],[10,1],[14,0,"hljs-number"],[12],[1,"500"],[13],[1,");\\n\\n   "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n   "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.new\'"],[13],[1,");\\n   "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," fillIn("],[10,1],[14,0,"hljs-string"],[12],[1,"\'input\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'New question\'"],[13],[1,");\\n   "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.save\'"],[13],[1,");\\n\\n   assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'h2\'"],[13],[1,").hasText("],[10,1],[14,0,"hljs-string"],[12],[1,"\'The database went on vacation\'"],[13],[1,");\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This route handler definition is only in effect for the duration of this test, so as soon as it\'s over any handler you have defined for POST to "],[10,"code"],[12],[1,"/questions"],[13],[1," in your "],[10,"code"],[12],[1,"config.js"],[13],[1," file will be used again."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"using-scenarios-in-testing"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#using-scenarios-in-testing"],[14,0,"heading-anchor"],[12],[1,"Using scenarios in testing"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Typically you should reserve the "],[10,"code"],[12],[1,"scenarios/default.js"],[13],[1," file for development, so changes to it don\'t affect the rest of your test suite. That\'s why Mirage doesn\'t autoload this module during tests."],[13],[1,"\\n"],[10,2],[12],[1,"If there\'s some logic you\'d like to share between your development scenario and your tests, you can always make a new module under "],[10,"code"],[12],[1,"scenarios"],[13],[1," and import it in both places."],[13],[1,"\\n"],[10,2],[12],[1,"If you\'d like to load your development scenario in your tests, you can always directly import that module and run your test server through it:"],[13],[1,"\\n"],[10,2],[12],[1,"Create the module"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// scenarios/shared.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"server"],[13],[1,") "],[13],[1,"{\\n  server.loadFixtures("],[10,1],[14,0,"hljs-string"],[12],[1,"\'countries\'"],[13],[1,");\\n\\n  server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'event\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"10"],[13],[1,");\\n};"],[13],[13],[1,"\\n"],[10,2],[12],[1,"...load it in your default scenario"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," sharedScenario "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'../../mirage/scenarios/shared\'"],[13],[1,";\\n\\ntest("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can view the authors\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  sharedScenario(server);\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/contacts\'"],[13],[1,");\\n\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'p\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"count"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1," });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"...and then also load it in your tests (or even a common test setup function):"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," sharedScenario "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'../../mirage/scenarios/shared\'"],[13],[1,";\\n\\ntest("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can view the authors\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  sharedScenario(server);\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ..."],[13],[1,"\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This same sort of pattern will work for Integration and Unit tests as well."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"Those are the basics of Acceptance Testing with Mirage! Next let\'s talk about Integration and Unit tests."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/testing/acceptance-tests/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/testing/assertions/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"DHmIsnHO",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"assertions"],[14,0,"docs-md__h1"],[12],[1,"Assertions"],[13],[1,"\\n    "],[10,2],[12],[1,"Most of your tests will assert against your Ember app\'s UI. After visiting a route and interacting with the app, and after Mirage handles any requests, you\'ll assert that your UI is in the state you expect it to be."],[13],[1,"\\n"],[10,2],[12],[1,"But sometimes even if your UI looks consistent, your app may have a bug on account of sending the wrong data to your server."],[13],[1,"\\n"],[10,2],[12],[1,"To address this class of issues, you can assert against the state of your Mirage server within your tests, right alongside your UI assertions. This will give you more confidence that your Ember app is sending over the correct data to your backend."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"asserting-against-mirage-s-database"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#asserting-against-mirage-s-database"],[14,0,"heading-anchor"],[12],[1,"Asserting against Mirage\'s database"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The simplest way to assert that your Ember app is sending over the correct data to your backend is to assert against Mirage\'s database. If the correct data makes it there, you\'ll have confidence not only that the JSON payloads from your Ember app are correct, but that your Mirage route handlers are behaving as you expect."],[13],[1,"\\n"],[10,2],[12],[1,"Here\'s an example:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"I can change the lesson\'s title\\""],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'lesson\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'My First Lesson\'"],[13],[1," })\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.Edit\'"],[13],[1,")\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," fillIn("],[10,1],[14,0,"hljs-string"],[12],[1,"\'input\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Updated lesson\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.Save\'"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Assert against our app\'s UI"],[13],[1,"\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'h1\'"],[13],[1,").hasText("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Updated lesson\'"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Also check that the data was \\"persisted\\" to our backend"],[13],[1,"\\n  assert.equal("],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.db.lessons["],[10,1],[14,0,"hljs-number"],[12],[1,"0"],[13],[1,"].title, "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Updated lesson\'"],[13],[1,");\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This is a great way to gain some extra confidence that your Ember app is sending over the data you expect."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"asserting-against-mirage-models"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#asserting-against-mirage-models"],[14,0,"heading-anchor"],[12],[1,"Asserting against Mirage Models"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"It can also be useful to assert against Mirage\'s ORM models, to verify things like updates to your model\'s relationships:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'I can add a tag to a post\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," programming = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'tag\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"name"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Programming\'"],[13],[1," });\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," post = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'post\'"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"`/posts/"],[10,1],[14,0,"hljs-subst"],[12],[1,"${post.id}"],[13],[1,"/edit`"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," select("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.tags\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Programming\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.save\'"],[13],[1,");\\n\\n  assert.dom().includesText("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Saved!\'"],[13],[1,");\\n  assert.equal(post.reload().tagIds.includes(programming.id));\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"The "],[10,"code"],[12],[1,"reload"],[13],[1," method on Mirage models will rehydrate them with any new database data since they were instantiated, allowing you to verify that your route handler logic worked as expected."],[13],[1,"\\n"],[10,2],[12],[1,"Asserting against models is basically another way to verify Mirage\'s database data is correct."],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"asserting-against-handled-requests-and-responses"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#asserting-against-handled-requests-and-responses"],[14,0,"heading-anchor"],[12],[1,"Asserting against handled requests and responses"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"You can also assert against the actual HTTP requests and responses that are made during your test."],[13],[1,"\\n"],[10,2],[12],[1,"To do this, first enable "],[10,3],[14,6,"https://github.com/pretenderjs/pretender#tracking-requests"],[14,0,"docs-md__a"],[12],[1,"Pretender\'s "],[10,"code"],[12],[1,"trackedRequests"],[13],[1," feature"],[13],[1," by enabling the "],[10,"code"],[12],[1,"trackRequests"],[13],[1," environment option:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// config/environment.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,".exports = "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"environment"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"if"],[13],[1," (environment === "],[10,1],[14,0,"hljs-string"],[12],[1,"\'test\'"],[13],[1,") {\\n    ENV["],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage\'"],[13],[1,"] = {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"trackRequests"],[13],[1,": "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,"\\n    };\\n  }\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"This feature is disabled by default to avoid memory issues during long development sessions."],[13],[1,"\\n"],[10,2],[12],[1,"Now Mirage will track every request (along with the associated response) and make them available to you via "],[10,"code"],[12],[1,"server.pretender.handledRequests"],[13],[1,". That way you can assert against requests in that array at the end of your test."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[1,"test("],[10,1],[14,0,"hljs-string"],[12],[1,"\\"I can filter the table\\""],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1," });\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.createList("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", "],[10,1],[14,0,"hljs-number"],[12],[1,"3"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"genre"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Drama\'"],[13],[1," });\\n\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," visit("],[10,1],[14,0,"hljs-string"],[12],[1,"\'/\'"],[13],[1,");\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," select("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.genre\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Assert against our app\'s UI"],[13],[1,"\\n  assert.dom("],[10,1],[14,0,"hljs-string"],[12],[1,"\'tr\'"],[13],[1,").exists({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"count"],[13],[1,": "],[10,1],[14,0,"hljs-number"],[12],[1,"5"],[13],[1," });\\n\\n  "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Also assert against the HTTP request count & query"],[13],[1,"\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," requests = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.pretender.handledRequests;\\n  assert.equal(requests.length, "],[10,1],[14,0,"hljs-number"],[12],[1,"1"],[13],[1,");\\n  assert.deepEqual(requests["],[10,1],[14,0,"hljs-number"],[12],[1,"0"],[13],[1,"].queryParams, { "],[10,1],[14,0,"hljs-string"],[12],[1,"\'filter[genre]\'"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Sci-Fi\'"],[13],[1," });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"In general we recommend asserting against Mirage\'s database and your UI, as the specifics of your app\'s HTTP requests should be considered implementation details of the behavior you\'re actually interested in verifying. But there\'s certainly valid reasons to drop down and assert against HTTP data."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"And with that, you\'ve completed the main portion of the guides! Read on to see some advanced use cases and configuration options, or head over to the API docs to see how to use Mirage\'s various classes."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/testing/assertions/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/docs/testing/integration-and-unit-tests/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"Gtnn3K7+",block:'[[[10,0],[14,0,"docs-md"],[12],[10,"h1"],[14,1,"integration-and-unit-tests"],[14,0,"docs-md__h1"],[12],[1,"Integration and unit tests"],[13],[1,"\\n    "],[10,2],[12],[1,"While Mirage was originally designed for acceptance testing, it also works great when writing integration and unit tests."],[13],[1,"\\n"],[10,2],[12],[1,"Let\'s say you have a data-fetching component, and you want to write a "],[10,3],[14,6,"https://guides.emberjs.com/release/testing/#toc_rendering-tests"],[14,0,"docs-md__a"],[12],[1,"rendering test"],[13],[1," to verify its behavior."],[13],[1,"\\n"],[10,2],[12],[1,"You can import and use the "],[10,"code"],[12],[1,"setupMirage"],[13],[1," function directly in your rendering test, and use Mirage just like you would in an acceptance test."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { "],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1," } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupRenderingTest } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupMirage } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage/test-support\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Integration | Component | FindRecord\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"hooks"],[13],[1,") "],[13],[1,"{\\n  setupRenderingTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'it can fetch records\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'movie\'"],[13],[1,", { "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1," });\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," render(hbs"],[10,1],[14,0,"hljs-string"],[12],[1,"`\\n      <FindRecord @modelName=\'movie\' @id=\'1\' as |model|>\\n        <h1>{{model.title}}</h1>\\n      </FindRecord>\\n    `"],[13],[1,");\\n\\n    assert.equal("],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".element.textContent, "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Interstellar\'"],[13],[1,");\\n  });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"If you want to define some new logic for your Mirage route handlers instead of using the global ones defined in your "],[10,"code"],[12],[1,"mirage/config.js"],[13],[1," file, you can use "],[10,"code"],[12],[1,"this.server"],[13],[1," to setup new routes."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { "],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1," } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupRenderingTest } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupMirage } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage/test-support\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Integration | Component | FindRecord\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"hooks"],[13],[1,") "],[13],[1,"{\\n  setupRenderingTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'it renders an error state\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.get(\\n      "],[10,1],[14,0,"hljs-string"],[12],[1,"\'/movies/:id\'"],[13],[1,",\\n      () => ({ "],[10,1],[14,0,"hljs-attr"],[12],[1,"errors"],[13],[1,": [ "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Something went wrong\'"],[13],[1," ]}),\\n      "],[10,1],[14,0,"hljs-number"],[12],[1,"500"],[13],[1,"\\n    );\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," render(hbs"],[10,1],[14,0,"hljs-string"],[12],[1,"`\\n      <FindRecord @modelName=\'movie\' @id=\'1\' as |loading error model|>\\n        {{#if error}}\\n          <h1>Whoops!</h1>\\n        {{/if}}\\n      </FindRecord>\\n    `"],[13],[1,");\\n\\n    assert.equal("],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".element.textContent, "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Whoops!\'"],[13],[1,");\\n  });\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h2"],[14,1,"creating-ember-data-models-on-the-client-with-mirage"],[14,0,"docs-md__h2"],[12],[10,3],[14,6,"#creating-ember-data-models-on-the-client-with-mirage"],[14,0,"heading-anchor"],[12],[1,"Creating Ember Data models on the client with Mirage"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"Something that can be a bit confusing is when you need to write a test against Ember Data models, and you reach for Mirage to help you create some."],[13],[1,"\\n"],[10,2],[12],[1,"For example, let\'s say we were writing a rendering test to verify the behavior of our "],[10,"code"],[12],[1,"<ArticleForm>"],[13],[1," component:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Integration | Component | ArticleForm\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"hooks"],[13],[1,") "],[13],[1,"{\\n  setupRenderingTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'it can edit an article\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// get the article"],[13],[1,"\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," render(hbs"],[10,1],[14,0,"hljs-string"],[12],[1,"`\\n      <ArticleForm @article={{article}}>\\n    `"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," fillIn("],[10,1],[14,0,"hljs-string"],[12],[1,"\'input\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'New title\'"],[13],[1,");\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.save\'"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// assert the model was saved"],[13],[1,"\\n  });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"How might we test this?"],[13],[1,"\\n"],[10,2],[12],[1,"It might be tempting to use Mirage\'s "],[10,"code"],[12],[1,"server.create"],[13],[1,", since you probably already have factories defined:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Integration | Component | ArticleForm\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"hooks"],[13],[1,") "],[13],[1,"{\\n  setupRenderingTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'it can edit an article\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// 🔴 Don\'t do this"],[13],[1,"\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," article = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Old title\'"],[13],[1,"\\n    });\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".set("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", article);\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," render(hbs"],[10,1],[14,0,"hljs-string"],[12],[1,"`\\n      <ArticleForm @article={{article}}>\\n    `"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," fillIn("],[10,1],[14,0,"hljs-string"],[12],[1,"\'input\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'New title\'"],[13],[1,");\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.save\'"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// assert the model was saved"],[13],[1,"\\n  });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"But you shouldn\'t do this."],[13],[1,"\\n"],[10,2],[12],[1,"Even though Mirage pulls its initial schema from your Ember Data models, Mirage models don\'t actually know anything about your Ember app."],[13],[1,"\\n"],[10,2],[12],[1,"Mirage models exist solely in your \\"backend\\", and are only useful in helping you create your mock server definition."],[13],[1,"\\n"],[10,2],[12],[1,"The only way data gets from Mirage to your Ember app is via an HTTP request – which is also true for your production server."],[13],[1,"\\n"],[10,2],[12],[1,"So, in the same way that you wouldn\'t create a model in your server-side framework and pass it directly into an Ember component, you should also not pass a Mirage model directly into an Ember component."],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// 🔴 Don\'t do this"],[13],[1,"\\n"],[10,1],[14,0,"hljs-comment"],[12],[1,"// `article` is a Mirage model. It should never be consumed directly by Ember code."],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," article = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,");\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".set("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", article);\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," render(hbs"],[10,1],[14,0,"hljs-string"],[12],[1,"`\\n  <ArticleForm @article={{article}}>\\n`"],[13],[1,");"],[13],[13],[1,"\\n"],[10,2],[12],[1,"So, how might we get an article materialized into Ember Data\'s store so we can test this component, while still leveraging our Mirage factory definitions?"],[13],[1,"\\n"],[10,2],[12],[1,"Right now, there is no first-class API for this, but one is in the works. In the meantime, there are two common ways to accomplish this."],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"using-findrecord-and-findall"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#using-findrecord-and-findall"],[14,0,"heading-anchor"],[12],[1,"Using findRecord and findAll"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The first approach is to lookup Ember Data\'s store, and use it to find the record (just like your Ember application\'s routes do):"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { "],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1," } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupRenderingTest } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupMirage } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage/test-support\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { click, fillIn } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'@ember/test-helpers\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Integration | Component | ArticleForm\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"hooks"],[13],[1,") "],[13],[1,"{\\n  setupRenderingTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'it can edit an article\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ✅ Option 1: Use the store to find the record"],[13],[1,"\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," serverArticle = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Old title\'"],[13],[1,"\\n    });\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," store = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".owner.lookup("],[10,1],[14,0,"hljs-string"],[12],[1,"\'service:store\'"],[13],[1,");\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," article = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," store.findRecord("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", serverArticle.id);\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".set("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", article);\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," render(hbs"],[10,1],[14,0,"hljs-string"],[12],[1,"`\\n      <ArticleForm @article={{article}}>\\n    `"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," fillIn("],[10,1],[14,0,"hljs-string"],[12],[1,"\'input\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'New title\'"],[13],[1,");\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.save\'"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// assert the model was saved"],[13],[1,"\\n  });\\n});"],[13],[13],[1,"\\n\\n      "],[10,"h3"],[14,1,"writing-a-helper-to-push-mirage-s-database"],[14,0,"docs-md__h3"],[12],[10,3],[14,6,"#writing-a-helper-to-push-mirage-s-database"],[14,0,"heading-anchor"],[12],[1,"Writing a helper to push Mirage\'s database"],[13],[13],[1,"\\n    "],[10,2],[12],[1,"The second approach is to make a helper that serializers Mirage\'s database into JSON and pushes that JSON into your Ember Data store."],[13],[1,"\\n"],[10,2],[12],[1,"The actual logic might depend on the configuration of your Mirage server, but if you\'re following all of Mirage\'s conventions it should look roughly like this:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-comment"],[12],[1,"// your-app/tests/helpers/push-mirage-into-store.js"],[13],[1,"\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { getContext } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'@ember/test-helpers\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { run } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'@ember/runloop\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"export"],[13],[1," "],[10,1],[14,0,"hljs-keyword"],[12],[1,"default"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[13],[1,") "],[13],[1,"{\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," context = getContext();\\n  "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," store = context.owner.lookup("],[10,1],[14,0,"hljs-string"],[12],[1,"\'service:store\'"],[13],[1,");\\n\\n  "],[10,1],[14,0,"hljs-built_in"],[12],[1,"Object"],[13],[1,".keys(context.server.schema)\\n    .filter("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"key"],[13],[1," =>"],[13],[1," context.server.schema[key].all !== "],[10,1],[14,0,"hljs-literal"],[12],[1,"undefined"],[13],[1,") "],[10,1],[14,0,"hljs-comment"],[12],[1,"// Get the resources"],[13],[1,"\\n    .forEach("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"resource"],[13],[1," =>"],[13],[1," {\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," models = context.server.schema[resource].all();\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," modelName = models.modelName;\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," serializer = context.server.serializerOrRegistry.serializerFor(modelName);\\n\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," originalAlwaysIncludeLinkageData = serializer.alwaysIncludeLinkageData;\\n      serializer.alwaysIncludeLinkageData = "],[10,1],[14,0,"hljs-literal"],[12],[1,"true"],[13],[1,";\\n\\n      "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," json = serializer.serialize(models);\\n\\n      serializer.alwaysIncludeLinkageData = originalAlwaysIncludeLinkageData;\\n\\n      run("],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-params"],[12],[1,"()"],[13],[1," =>"],[13],[1," {\\n        store.pushPayload(json);\\n      });\\n    });\\n}"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Now in your test, call your helper to seed Ember Data\'s store, and then use "],[10,"code"],[12],[1,"peekRecord"],[13],[1," to materialize and work with Ember Data records:"],[13],[1,"\\n"],[10,"pre"],[14,0,"docs-md__code"],[12],[10,"code"],[14,0,"undefinedjs"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { "],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1," } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupRenderingTest } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-qunit\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { setupMirage } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'ember-cli-mirage/test-support\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," { click, fillIn } "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'@ember/test-helpers\'"],[13],[1,";\\n"],[10,1],[14,0,"hljs-keyword"],[12],[1,"import"],[13],[1," pushMirageIntoStore "],[10,1],[14,0,"hljs-keyword"],[12],[1,"from"],[13],[1," "],[10,1],[14,0,"hljs-string"],[12],[1,"\'YOUR-APP/tests/helpers/push-mirage-into-store\'"],[13],[1,";\\n\\n"],[10,1],[14,0,"hljs-built_in"],[12],[1,"module"],[13],[1,"("],[10,1],[14,0,"hljs-string"],[12],[1,"\'Integration | Component | ArticleForm\'"],[13],[1,", "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"hooks"],[13],[1,") "],[13],[1,"{\\n  setupRenderingTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[10,1],[14,0,"hljs-string"],[12],[1,"\'it can edit an article\'"],[13],[1,", "],[10,1],[14,0,"hljs-keyword"],[12],[1,"async"],[13],[1," "],[10,1],[14,0,"hljs-function"],[12],[10,1],[14,0,"hljs-keyword"],[12],[1,"function"],[13],[1,"("],[10,1],[14,0,"hljs-params"],[12],[1,"assert"],[13],[1,") "],[13],[1,"{\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// ✅ Option 2: Use the store to find the record"],[13],[1,"\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," serverArticle = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".server.create("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", {\\n      "],[10,1],[14,0,"hljs-attr"],[12],[1,"title"],[13],[1,": "],[10,1],[14,0,"hljs-string"],[12],[1,"\'Old title\'"],[13],[1,"\\n    });\\n    pushMirageIntoStore();\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," store = "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".owner.lookup("],[10,1],[14,0,"hljs-string"],[12],[1,"\'service:store\'"],[13],[1,");\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"let"],[13],[1," article = store.peekRecord("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", serverArticle.id);\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"this"],[13],[1,".set("],[10,1],[14,0,"hljs-string"],[12],[1,"\'article\'"],[13],[1,", article);\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," render(hbs"],[10,1],[14,0,"hljs-string"],[12],[1,"`\\n      <ArticleForm @article={{article}}>\\n    `"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," fillIn("],[10,1],[14,0,"hljs-string"],[12],[1,"\'input\'"],[13],[1,", "],[10,1],[14,0,"hljs-string"],[12],[1,"\'New title\'"],[13],[1,");\\n    "],[10,1],[14,0,"hljs-keyword"],[12],[1,"await"],[13],[1," click("],[10,1],[14,0,"hljs-string"],[12],[1,"\'.save\'"],[13],[1,");\\n\\n    "],[10,1],[14,0,"hljs-comment"],[12],[1,"// assert the model was saved"],[13],[1,"\\n  });\\n});"],[13],[13],[1,"\\n"],[10,2],[12],[1,"Something like "],[10,"code"],[12],[1,"pushMirageIntoStore"],[13],[1," will probably make its way into Mirage at some point."],[13],[1,"\\n"],[10,"hr"],[14,0,"docs-md__hr"],[12],[13],[10,2],[12],[1,"Now that you\'ve seen how to use "],[10,"code"],[12],[1,"setupMirage"],[13],[1," outside of an acceptance test, you can use it in any kind of test where it makes sense to run your Mirage server!"],[13],[1,"\\n"],[10,2],[12],[1,"Next, we discuss some ways you can go about asserting against your Mirage mock server."],[13],[13]],[],false,[]]',moduleName:"dummy/pods/docs/testing/integration-and-unit-tests/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/pods/index/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"8Nbw51/U",block:'[[[1,[34,0]],[1,"\\n\\n"],[10,0],[14,0,"home"],[12],[1,"\\n  "],[10,0],[14,0,"home__section"],[12],[1,"\\n    "],[10,"h2"],[12],[1,"Productive"],[13],[1,"\\n    "],[10,2],[14,0,"home__lead"],[12],[1,"\\n      Spend less time wiring up HTTP stubs, and get back to developing your app.\\n    "],[13],[1,"\\n  "],[13],[1,"\\n\\n  "],[10,0],[14,0,"home__section"],[12],[1,"\\n    "],[10,"h2"],[12],[1,"Test-worthy"],[13],[1,"\\n    "],[10,2],[14,0,"home__lead"],[12],[1,"\\n      Use factories to define your server\'s state per test. Acceptance testing just got a whole lot easier.\\n    "],[13],[1,"\\n  "],[13],[1,"\\n\\n  "],[10,0],[14,0,"home__section"],[12],[1,"\\n    "],[10,"h2"],[12],[1,"Shareable"],[13],[1,"\\n    "],[10,2],[14,0,"home__lead"],[12],[1,"\\n      Share a functional prototype of your app that runs entirely in the client – before writing a single line of your API.\\n    "],[13],[1,"\\n  "],[13],[1,"\\n\\n  "],[10,0],[14,0,"home__cta"],[12],[1,"\\n"],[6,[39,1],null,[["class","route"],["home__cta-link","docs"]],[["default"],[[[[1,"      Read the docs\\n"]],[]]]]],[1,"  "],[13],[1,"\\n"],[13],[1,"\\n"]],[],false,["docs-hero","link-to"]]',moduleName:"dummy/pods/index/template.hbs",isStrictMode:!1})
e.default=t}))
define("dummy/pods/not-found/route",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Route.extend({beforeModel:function(){var e=this,t=this.paramsFor("not-found").path
this.redirects.forEach((function(n){n.from.forEach((function(r){t!==r&&t!=="".concat(r,"/")||e.transitionTo("blog.detail",n.to.replace("blog/",""))}))}))},redirects:[{from:["blog/2018/02/01/changing-mirages-default-linkage-data-behavior","blog/2018-02-01-changing-mirages-default-linkage-data-behavior"],to:"blog/changing-mirages-default-linkage-data-behavior-1475"},{from:["blog/2017/06/05/polymorphic-associations-and-auto-discovery-of-ember-data-models","blog/2017-06-05-polymorphic-associations-and-auto-discovery-of-ember-data-models"],to:"blog/polymorphic-associations-and-auto-discovery-of-ember-data-models-1483"},{from:["blog/2017/01/09/0-3-0-beta-series","blog/2017-01-09-0-3-0-beta-series"],to:"blog/0-3-0-beta-series-1484"},{from:["blog/2016/05/31/0-2-0-released","blog/2016-05-31-0-2-0-released"],to:"blog/0-2-0-released-1485"},{from:["blog/2016/01/03/0-2-0-beta.9-released","blog/2016-01-03-0-2-0-beta-9-released"],to:"blog/0-2-0-beta-9-released-1486"},{from:["blog/2016/01/03/0-2-update-only-inject-schema","blog/2016-01-03-0-2-update-only-inject-schema"],to:"blog/0-2-update-only-inject-schema-1487"},{from:["blog/2015/11/03/inside-ember-cli-mirage","blog/2015-11-03-inside-ember-cli-mirage"],to:"blog/inside-ember-cli-mirage-1488"},{from:["blog/2015/10/19/serializers-ready","blog/2015-10-19-serializers-ready"],to:"blog/serializers-ready-1489"},{from:["blog/2015/09/15/router-handler","blog/2015-09-15-router-handler"],to:"blog/router-handler-1490"},{from:["blog/2015/09/10/orm-not-ready-yet","blog/2015-09-10-orm-not-ready-yet"],to:"blog/orm-not-ready-yet-1491"},{from:["blog/2015/09/06/thoughts-on-model-attribute-formatting","blog/2015-09-06-thoughts-on-model-attribute-formatting"],to:"blog/thoughts-on-model-attribute-formatting-1492"}]})
e.default=t})),define("dummy/pods/not-found/template",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"WVQMB1QO",block:'[[[10,0],[14,0,"docs-container"],[12],[1,"\\n  "],[10,"h1"],[12],[1,"Not found"],[13],[1,"\\n  "],[10,2],[12],[1,"This page doesn\'t exist. "],[6,[39,0],null,[["route"],["index"]],[["default"],[[[[1,"Head home?"]],[]]]]],[13],[1,"\\n"],[13],[1,"\\n"]],[],false,["link-to"]]',moduleName:"dummy/pods/not-found/template.hbs",isStrictMode:!1})
e.default=t})),define("dummy/resolver",["exports","ember-resolver"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default
e.default=n})),define("dummy/router",["exports","ember-cli-addon-docs/router","dummy/config/environment"],(function(e,t,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var r=t.default.extend({location:n.default.locationType,rootURL:n.default.rootURL})
r.map((function(){(0,t.docsRoute)(this,(function(){this.route("getting-started",(function(){this.route("what-is-mirage"),this.route("installation"),this.route("upgrade-guide"),this.route("overview")})),this.route("route-handlers",(function(){this.route("functions"),this.route("shorthands")})),this.route("data-layer",(function(){this.route("database"),this.route("orm"),this.route("models"),this.route("relationships"),this.route("factories"),this.route("fixtures"),this.route("serializers",(function(){this.route("ember-data-serializer")}))})),this.route("testing",(function(){this.route("acceptance-tests"),this.route("integration-and-unit-tests"),this.route("assertions")})),this.route("advanced",(function(){this.route("environment-options"),this.route("server-configuration"),this.route("simulating-cookie-responses"),this.route("mocking-guids"),this.route("customizing-the-inflector"),this.route("switching-between-scenarios")})),this.route("api",(function(){this.route("class",{path:"/:class_id"})}))})),this.route("blog",(function(){this.route("detail",{path:"/:post_slug_and_id"})})),this.route("not-found",{path:"/*path"})}))
var o=r
e.default=o})),define("dummy/routes/docs",["exports","ember-cli-addon-docs/routes/docs"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/routes/docs/api/item",["exports","ember-cli-addon-docs/routes/docs/api/item"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/-addon-docs",["exports","ember-cli-addon-docs/serializers/-addon-docs"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/-default",["exports","@ember-data/serializer/json"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/-json-api",["exports","@ember-data/serializer/json-api"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/-rest",["exports","@ember-data/serializer/rest"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/address",["exports","@ember-data/serializer/rest"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default.extend({primaryKey:"addressId"})
e.default=n})),define("dummy/serializers/application",["exports","@ember-data/serializer/json-api"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default.extend({appSerializer:!0,keyForAttribute:function(e){return e},keyForRelationship:function(e){return e}})
e.default=n})),define("dummy/serializers/class",["exports","ember-cli-addon-docs/serializers/class"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/component",["exports","ember-cli-addon-docs/serializers/component"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/module",["exports","ember-cli-addon-docs/serializers/module"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/post",["exports","ember-data"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default.JSONAPISerializer.extend({})
e.default=n})),define("dummy/serializers/project",["exports","ember-cli-addon-docs/serializers/project"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/serializers/word-smith",["exports","@ember-data/serializer/rest"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default.extend({attrs:{address:"addressId",blogPosts:{deserialize:"records"}}})
e.default=n})),define("dummy/services/ajax",["exports","ember-ajax/services/ajax"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/services/docs-routes",["exports","ember-cli-addon-docs/services/docs-routes"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/services/docs-search",["exports","ember-cli-addon-docs/services/docs-search"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/services/keyboard",["exports","ember-keyboard/services/keyboard"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/services/liquid-fire-transitions",["exports","liquid-fire/transition-map"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default
e.default=n})),define("dummy/services/media",["exports","ember-responsive/services/media"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=t.default
e.default=n})),define("dummy/services/modal-dialog",["exports","dummy/config/environment"],(function(e,t){function n(e){return Ember.computed((function(){return t.default["ember-modal-dialog"]&&t.default["ember-modal-dialog"][e]}))}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var r=Ember.Service.extend({hasEmberTether:n("hasEmberTether"),hasLiquidWormhole:n("hasLiquidWormhole"),hasLiquidTether:n("hasLiquidTether"),destinationElementId:null})
e.default=r})),define("dummy/services/moment",["exports","ember-moment/services/moment","dummy/config/environment"],(function(e,t,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var r=Ember.get,o=t.default.extend({defaultFormat:r(n.default,"moment.outputFormat")})
e.default=o})),define("dummy/services/project-version",["exports","ember-cli-addon-docs/services/project-version"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/services/router-scroll",["exports","ember-router-scroll/services/router-scroll"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/templates/docs/api/item",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"xCteTmy/",block:'[[[41,[33,1,["isComponent"]],[[[1,"  "],[1,[28,[35,2],null,[["component"],[[33,1]]]]],[1,"\\n"]],[]],[[[41,[33,1,["isClass"]],[[[1,"  "],[1,[28,[35,3],null,[["class"],[[33,1]]]]],[1,"\\n"]],[]],[[[1,"  "],[1,[28,[35,4],null,[["module"],[[33,1]]]]],[1,"\\n"]],[]]]],[]]]],[],false,["if","model","api/x-component","api/x-class","api/x-module"]]',moduleName:"dummy/templates/docs/api/item.hbs",isStrictMode:!1})
e.default=t})),define("dummy/transforms/boolean",["exports","@ember-data/serializer/-private"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.BooleanTransform}})}))
define("dummy/transforms/date",["exports","@ember-data/serializer/-private"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.DateTransform}})})),define("dummy/transforms/number",["exports","@ember-data/serializer/-private"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.NumberTransform}})})),define("dummy/transforms/string",["exports","@ember-data/serializer/-private"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.StringTransform}})})),define("dummy/transitions",["exports"],(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){this.transition(this.hasClass("modal-fade-and-drop"),this.use("fadeAndDrop")),this.transition(this.hasClass("modal-fade"),this.use("fade",{duration:150}))}})),define("dummy/transitions/cross-fade",["exports","liquid-fire/transitions/cross-fade"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/default",["exports","liquid-fire/transitions/default"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/explode",["exports","liquid-fire/transitions/explode"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/fade-and-drop",["exports","ember-cli-addon-docs/transitions/fade-and-drop"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/fade",["exports","liquid-fire/transitions/fade"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/flex-grow",["exports","liquid-fire/transitions/flex-grow"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/fly-to",["exports","liquid-fire/transitions/fly-to"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/move-over",["exports","liquid-fire/transitions/move-over"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/scale",["exports","liquid-fire/transitions/scale"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/scroll-then",["exports","liquid-fire/transitions/scroll-then"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/to-down",["exports","liquid-fire/transitions/to-down"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/to-left",["exports","liquid-fire/transitions/to-left"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/to-right",["exports","liquid-fire/transitions/to-right"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/to-up",["exports","liquid-fire/transitions/to-up"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/transitions/wait",["exports","liquid-fire/transitions/wait"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/utils/get-cmd-key",["exports","ember-keyboard/utils/get-cmd-key"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/utils/listener-name",["exports","ember-keyboard/utils/listener-name"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/utils/titleize",["exports","ember-cli-string-helpers/utils/titleize"],(function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})})),define("dummy/config/environment",[],(function(){try{var e="dummy/config/environment",t=document.querySelector('meta[name="'+e+'"]').getAttribute("content"),n={default:JSON.parse(unescape(t))}
return Object.defineProperty(n,"__esModule",{value:!0}),n}catch(r){throw new Error('Could not read config from meta tag with name "'+e+'".')}})),runningTests||require("dummy/app").default.create({})
